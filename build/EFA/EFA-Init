#!/bin/bash
# +--------------------------------------------------------------------+
# EFA-Init
# Version 20140624
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2014  http://www.efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

# +---------------------------------------------------+
# Variables
# +---------------------------------------------------+
debug="0"
gitdlurl="https://raw.github.com/E-F-A/v3/master/build"
mirror="http://dl.efa-project.org"
mirrorpath="/build/3.0.0.6"
initpassword="EfaPr0j3ct"
# +---------------------------------------------------+

# +---------------------------------------------------+
# Lets start asking questions.
# +---------------------------------------------------+
function func_ask-hostname() {
  func_echo-header
  echo -e "$green[EFA]$clean What is the hostname of this machine? $cyan(Single Word)$clean"
  echo -e -n "$green[EFA]$clean : "
  read HOSTNAME
  hncheck=1
  while [ $hncheck != 0 ]
   do
     if [[ $HOSTNAME =~ ^[-a-zA-Z0-9]{2,256}+$ ]]
      then
        hncheck=0
      else
        echo -e "       $red ERROR: The hostname $HOSTNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the hostname$clean"
        echo -e "$green[EFA]$clean What is the hostname of this machine: $cyan(single Word)$clean"
        echo -e -n "$green[EFA]$clean : "
        read HOSTNAME
     fi
    done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-domainname() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the domain name for this machine"
  echo -e -n "$green[EFA]$clean : "
  read DOMAINNAME
  dncheck=1
  while [ $dncheck != 0 ]
   do
     if [[ $DOMAINNAME =~ ^[a-zA-Z0-9]+([\-\.]{1}[a-zA-Z0-9-]+)*\.[a-z]{2,6}$ ]]
      then
        dncheck=0
      else
        echo -e "       $red ERROR: The domain $DOMAINNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the domain$clean"
        echo -e "$green[EFA]$clean Please enter the domain name for this machine"
        echo -e -n "$green[EFA]$clean : "
        read DOMAINNAME
     fi
    done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-adminemail() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the email address of an admin "
  echo -e "$green[EFA]$clean This user will receive E.F.A. related notifications"
  echo -e -n "$green[EFA]$clean : "
  read ADMINEMAIL
  adminemailcheck=1
  while [ $adminemailcheck != 0 ]
   do
     if [[ $ADMINEMAIL =~ ^[-_.@Aa-zA-Z0-9]{2,256}+[a-zA-Z0-9]+([\-\.]{1}[a-zA-Z0-9]+)*\.[a-z]{2,6}$ ]]
      then
        adminemailcheck=0
      else
        echo -e "       $red ERROR: The address $ADMINEMAIL seems to be invalid"
        echo -e "        ERROR: please re-enter the admin email address$clean"
        echo -e "$green[EFA]$clean Please enter the email address of an admin "
        echo -e "$green[EFA]$clean This user will receive EFA related notifications"
        echo -e -n "$green[EFA]$clean : "
        read ADMINEMAIL
     fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-ipaddress() {
  func_echo-header
  # Get the primary interface
  func_interfaces
 
  # Display current IP
  echo -e "" 
  echo -e "$green[EFA]$clean Your current IP address is:"
  ifconfig $INTERFACE | grep inet\ addr | awk '{print $2}' | awk -F':' '{print $2}'

  # Get the IP and validate it
  echo -e ""
  echo -e "$green[EFA]$clean Please enter the IP address"
  echo -e -n "$green[EFA]$clean : "
  read IPADDRESS
  ipcheck=1
  while [ $ipcheck != 0 ]
   do
    if checkip $IPADDRESS
     then
       ipcheck=0
     else
       echo -e "       $red ERROR: The IP $IPADDRESS seems to be invalid"
       echo -e "        ERROR: Please re-enter the IP$clean"
       echo -e "$green[EFA]$clean Please enter the IP address"
       echo -e -n "$green[EFA]$clean : "
       read IPADDRESS
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-netmask() {
  func_echo-header

  # Display current netmask
  echo -e "" 
  echo -e "$green[EFA]$clean Your current netmask is:"
  ifconfig $INTERFACE | grep inet\ addr | awk '{print $4}' | awk -F':' '{print $2}'
  echo -e ""
 
  echo -e "$green[EFA]$clean Please enter the NETMASK"
  
  echo -e -n "$green[EFA]$clean : "
  read NETMASK
  nmcheck=1
  while [ $nmcheck != 0 ]
   do
    if checkip $NETMASK
     then
       nmcheck=0
     else
       echo -e "       $red ERROR: The NETMASK $NETMASK seems to be invalid"
       echo -e "        ERROR: Please re-enter the NETMASK$clean"
       echo -e "$green[EFA]$clean Please enter the NETMASK"
       echo -e -n "$green[EFA]$clean : "
       read NETMASK
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-gateway() {
  func_echo-header
  
  # Display current gateway
  echo -e "" 
  echo -e "$green[EFA]$clean Your current default gateway is:"
  route -n | grep 0.0.0.0 | awk '{print $2}' | grep -v 0.0.0.0
  echo -e ""
  
  echo -e "$green[EFA]$clean Please enter the default gateway address"
  echo -e -n "$green[EFA]$clean : "
  read GATEWAY
  gwcheck=1
  while [ $gwcheck != 0 ]
   do
    if checkip $GATEWAY
     then
       gwcheck=0
     else
       echo -e "       $red ERROR: The GATEWAY $GATEWAY seems to be invalid"
       echo -e "        ERROR: Please re-enter the GATEWAY$clean"
       echo -e "$green[EFA]$clean Please enter the default gateway address"
       echo -e -n "$green[EFA]$clean : "
       read GATEWAY
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-dns1() {
  func_echo-header
  
  # Display current primary dns
  echo -e "" 
  echo -e "$green[EFA]$clean Your current primary dns is:"
  grep nameserver /etc/resolv.conf | awk '{print $2}' | sed -n 1p
  echo -e ""
  
  echo -e "$green[EFA]$clean Please enter the primary DNS server address"
  echo -e -n "$green[EFA]$clean : "
  read DNS1
  dns1check=1
  while [ $dns1check != 0 ]
   do
    if checkip $DNS1
     then
       dns1check=0
     else
       echo -e "       $red ERROR: The DNS server $DNS1 seems to be invalid"
       echo -e "        ERROR: Please re-enter the primary DNS$clean"
       echo -e "$green[EFA]$clean Please enter the primary DNS server address"
       echo -e -n "$green[EFA]$clean : "
       read DNS1
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-dns2() {
  func_echo-header
  
  # Display current secondary dns
  echo -e "" 
  echo -e "$green[EFA]$clean Your current secondary dns is:"
  grep nameserver /etc/resolv.conf | awk '{print $2}' | sed -n 2p
  echo -e ""
  
  echo -e "$green[EFA]$clean Please enter the secondary DNS server address"
  echo -e -n "$green[EFA]$clean : "
  read DNS2
  dns2check=1
  while [ $dns2check != 0 ]
   do
    if checkip $DNS2
     then
       dns2check=0
     else
       echo -e "       $red ERROR: The DNS server $DNS2 seems to be invalid"
       echo -e "        ERROR: Please re-enter the secondary DNS$clean"
       echo -e "$green[EFA]$clean Please enter the secondary DNS server address"
       echo -e -n "$green[EFA]$clean : "
       read DNS2
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-username() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the user-name you would like to have."
  echo -e "$green[EFA]$clean This user will be granted SSH access to the system."
  echo -e "$green[EFA]$clean This user will also be used to logon to the webinterface."
  echo -e -n "$green[EFA]$clean : "
  read USERNAME
  uncheck=1
  while [ $uncheck != 0 ]
   do
     if [[ $USERNAME =~ ^[a-z_][a-z0-9_-]{1,30}+$ ]]
      then
        if [[ ! $USERNAME =~ ^root|apache|halt|mail|uucp|operator|games|gopher|ftp|nobody|dbus|vcsa|abrt|haldaemon|ntp|saslauth|postfix|sshd|mysql|tcpdump|clamav|sqlgrey|dnsmasq$ ]]
          then
            uncheck=0
          else
            echo -e "       $red ERROR: The user-name $USERNAME already exists"
            echo -e "        ERROR: please re-enter the user-name$clean"
            echo -e "$green[EFA]$clean Please enter the user-name you would like to have."
            echo -e -n "$green[EFA]$clean : "
            read USERNAME
        fi
      else
        echo -e "       $red ERROR: The user-name $USERNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the user-name$clean"
        echo -e "$green[EFA]$clean Please enter the user-name you would like to have."
        echo -e -n "$green[EFA]$clean : "
        read USERNAME
     fi
    done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-userpassword() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the password for the local user."
  echo -e "$green[EFA]$clean This password will also be used to logon to the webinterface"
  echo -e -n "$green[EFA]$clean Password: "
  read -s efauserpwd
  echo -e ""
  echo -e -n "$green[EFA]$clean Password Again: "
  read -s efauserpwd2
  efauserpwdcheck=1
  while [ $efauserpwdcheck != 0 ]
   do
     if [[ $efauserpwd = "$efauserpwd2" ]]
          then
            efauserpwdcheck=0
         else 
            echo -e ""
            echo -e "       $red ERROR: The passwords do not seem to match"
            echo -e "        ERROR: Please try again$clean"
            echo -e "$green[EFA]$clean Please enter the password for the local user."
            echo -e -n "$green[EFA]$clean Password: "
            read -s efauserpwd
            echo -e ""
            echo -e -n "$green[EFA]$clean Password Again: "
            read -s efauserpwd2
     fi
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-rootpassword() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the password for the root user."
  echo -e "$green[EFA]$clean This password is needed in case something goes"
  echo -e "$green[EFA]$clean wrong and you need to recover the system."
  echo -e ""
  echo -e "$green[EFA]$clean Please make this password long, strong and"
  echo -e "$green[EFA]$clean different from the user password."
  echo -e -n "$green[EFA]$clean Password: "
  read -s efarootpwd
  echo -e ""
  echo -e -n "$green[EFA]$clean Password Again: "
  read -s efarootpwd2
  efarootpwdcheck=1
  while [ $efarootpwdcheck != 0 ]
   do
     if [[ $efarootpwd = "$efarootpwd2" ]]
          then
            efarootpwdcheck=0
         else 
            echo -e ""
            echo -e "       $red ERROR: The passwords do not seem to match"
            echo -e "        ERROR: Please try again$clean"
            echo -e "$green[EFA]$clean Please enter the password for the root user."
            echo -e -n "$green[EFA]$clean Password: "
            read -s efarootpwd
            echo -e ""
            echo -e -n "$green[EFA]$clean Password Again: "
            read -s efarootpwd2
     fi
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# detect virtual system
# +---------------------------------------------------+
function func_detect-virtual() {
  func_echo-header
  echo -e "$green[EFA]$clean Checking host type"
  # This is a bit tricky as there is no uniform way to see what host type is used.
  # The VGA interface seems to be pretty unique tough so checking that for now.
  AreWeVMware="`/sbin/lspci | grep VGA | grep VMware`"
  if [ -n "${AreWeVMware##+([[:space:]])}"  ];then
    echo -e "$green[EFA]$clean You seem to be running on VMware"
    echo -e "$green[EFA]$clean Would you like me to install Open VM Tools?"
    echo ""
    echo -e "$green[EFA]$clean Open VM Tools is the opensource version of VMware tools."
    echo -e "$green[EFA]$clean If you require specific components that are not in Open VM Tools"
    echo -e "$green[EFA]$clean then choose no here and install VMware tools manually later on."
    echo ""
    echo -e "$green[EFA]$clean For most VMware users Open VM Tools should be good enough."
    echo -e -n "$green[EFA]$clean [Y/n]:"
    read VMwareInstallChoice
    if [[ $VMwareInstallChoice == "" || $VMwareInstallChoice == "Y" || $VMwareInstallChoice == "y" ]]; then
      InstallVmwareTools="1"
    else
      InstallVmwareTools="0"
    fi
  else
    echo -e "$green[EFA]$clean You don't seem to be running VMware"
    echo -e "$green[EFA]$clean in that case nothing to do, moving on.."
    pause
  fi
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-timezone() {
  func_echo-header
  echo -e -n "$green[EFA]$clean Is the host set to UTC time? [Y/n]: "
  read TMPUTC
  if [[ "$TMPUTC" == "" || "$TMPUTC" == "Y" || "$TMPUTC" == "y" ]]; then 
    ISUTC=true
  else
    ISUTC=false
  fi
  echo -e "$green[EFA]$clean Please select the time zone this system is located in."
  TZONE=`/usr/bin/tzselect`
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-keyboard() {
  func_echo-header
  echo -e "$green[EFA]$clean We will now launch the build in Keyboard layout selector"
  pause
  /usr/sbin/system-config-keyboard --text
  KEYBOARD=`cat /etc/sysconfig/keyboard  | grep KEYTABLE | sed 's/KEYTABLE=//;s/"//g'`
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-ianacode() {
  func_echo-header
  echo -e "$green[EFA]$clean I need your 2 letter IANA country code, this is used to"
  echo -e "$green[EFA]$clean determine the closest mirror to download software updates from."
  echo -e "$green[EFA]$clean If you don't know your country code please take a look at: "
  echo -e "$green[EFA]$clean http://www.iso.org/iso/country_names_and_code_elements "
  echo ""
  echo -e -n "$green[EFA]$clean Your IANA code (lowercase): "
  read IANACODE
  ianacodecheck=1
  while [ $ianacodecheck != 0 ]
   do
     if [[ $IANACODE =~ ^[a-z]{1,2}$ ]]
      then
        ianacodecheck=0
      else
        echo -e "       $red ERROR: The code $IANACODE seems to be invalid"
        echo -e "        ERROR: please re-enter the IANA code$clean"
        echo -e -n "$green[EFA]$clean Your IANA code (lowercase): "
        read IANACODE
     fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-mailserver() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the IP or hostname of your local mail server."
  echo -e "$green[EFA]$clean This will be your server that actually receives the mail."
  echo -e "$green[EFA]$clean For example your local Microsoft Exchange or Zimbra server."
  echo ""
  echo -e -n "$green[EFA]$clean Your mail server: "
  read MAILSERVER
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-orgname() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the name of your organization."
  echo -e "$green[EFA]$clean This needs to be a single word and is used in your mail headers."
  echo -e "$green[EFA]$clean (No spaces, dots or underscores allowed)."
  echo ""
  echo -e -n "$green[EFA]$clean Your organization's name: "
  read ORGNAME
  orgnamecheck=1
  while [ $orgnamecheck != 0 ]
   do
     if [[ $ORGNAME =~ ^[a-zA-Z1-9]{2,253}$ ]]
      then
        orgnamecheck=0
      else
        echo -e "       $red ERROR: The name $ORGNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the name.$clean"
        echo -e -n "$green[EFA]$clean Your organization's name: "
        read ORGNAME
     fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-updates() {
  func_echo-header
  echo -e "$green[EFA]$clean Auto Updates:"
  echo -e "$green[EFA]$clean With auto updates you can make sure this system is always up to date." 
  echo -e "$green[EFA]$clean by default we $red DISABLE $clean auto updates as it might not match your"
  echo -e "$green[EFA]$clean company update policy."
  echo -e "$green[EFA]$clean If you choose to keep auto updates DISABLED you will receive mails on your"
  echo -e "$green[EFA]$clean admin e-mail account if an update is available"
  echo ""
  echo -e "$green[EFA]$clean Here you can $green ENABLE $clean auto updates for this E.F.A. system."
  echo -e "$green[EFA]$clean This will check every month if there is an update available and if so"
  echo -e "$green[EFA]$clean it will automatically install the update."
  echo ""
  echo -e "$green[EFA]$clean Note: your system might reboot automatically during auto updates."
  echo ""
  echo -e -n "$green[EFA]$clean Would you like to $green ENABLE $clean auto updates? [y/N]: "
  read TMPUPDATES
  updatescheck=1
  while [ $updatescheck != 0 ]
    do 
      if [[ "$TMPUPDATES" == "Y" || "$TMPUPDATES" == "y" ]]; then 
        enableupdates=1
        updatescheck=0
      elif [[ "$TMPUPDATES" == "" || "$TMPUPDATES" == "N" || "$TMPUPDATES" == "n" ]]; then 
        enableupdates=0
        updatescheck=0
      else
          echo -e "       $red ERROR: please make an selection.$clean"
          echo -e -n "$green[EFA]$clean Would you like to $green ENABLE $clean auto updates? [y/N]: "
          read TMPUPDATES
      fi
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Verify the settings
# +---------------------------------------------------+
function func_verify-settings() {
  verifymenu=1
  while [ $verifymenu == "1" ]
   do
    func_echo-header
    echo -e "--------------------------------------------------------------"
    echo -e "$green[EFA]$clean Thank you, the following settings have been gathered:"
    echo -e " "
    echo -e "1)  Hostname       : $HOSTNAME"
    echo -e "2)  Domainname     : $DOMAINNAME"
    echo -e "3)  Admin Email    : $ADMINEMAIL"
    echo -e "4)  Interface      : $INTERFACE"
    echo -e "5)  IP address     : $IPADDRESS"
    echo -e "6)  Netmask        : $NETMASK"
    echo -e "7)  Gateway        : $GATEWAY"
    echo -e "8)  Primary DNS    : $DNS1"
    echo -e "9)  Secondary DNS  : $DNS2"
    echo -e "10) User           : $USERNAME"
    echo -e "11) User PWD       : <hidden>"
    echo -e "12) Admin PWD      : <hidden>"
    echo -e -n "13) VMware Tools   : "; if [[ "$InstallVmwareTools" -eq 1 ]]; then echo "Install"; else echo "Not needed"; fi
    echo -e -n "14) Time zone      : $TZONE "; if [[ "$ISUTC" == true ]]; then echo " Using UTC "; else echo " Not using UTC"; fi
    echo -e "15) Keyboard       : $KEYBOARD"
    echo -e "16) IANA Code      : $IANACODE"
    echo -e "17) Mail Server    : $MAILSERVER"
    echo -e "18) Org. name      : $ORGNAME"
    echo -e -n "19) Auto update    : "; if [[ "$enableupdates" -eq 1 ]]; then echo "Enabled"; else echo "Disabled"; fi
    echo -e "--------------------------------------------------------------"
    echo -e ""
    echo -e "$green[EFA]$clean If these settings are correct type 'OK' to continue."
    echo -e "$green[EFA]$clean if there is an error enter the number you want to change."
    echo -e -n "$green[EFA]$clean : "
    local choice
    read choice
    case $choice in
                1)        func_ask-hostname
                        ;;
                2)        func_ask-domainname
                        ;;
                3)        func_ask-adminemail
                        ;;
                4)        func_ask-ipaddress
                        ;;
                5)        func_ask-ipaddress
                        ;;
                6)        func_ask-netmask
                        ;;
                7)        func_ask-gateway
                        ;;
                8)        func_ask-dns1
                        ;;
                9)        func_ask-dns2
                        ;;
                10)       func_ask-username
                        ;;
                11)       func_ask-userpassword
                        ;;
                12)       func_ask-rootpassword
                        ;;
                13)       func_detect-virtual
                        ;;
                14)       func_ask-timezone
                        ;;
                15)       func_ask-keyboard
                        ;;
                16)       func_ask-ianacode
                        ;;
                17)       func_ask-mailserver
                        ;;
                18)       func_ask-orgname
                        ;;
                19)       func_ask-updates
                        ;;
                OK)       verifymenu=0
                        ;;
                ok)       verifymenu=0
                        ;;
    esac
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Configure system
# +---------------------------------------------------+
function func_configure-system() {
  func_echo-header
  echo -e "$green[EFA]$clean Configuring system"
  
  # +--------------------------------------------------+
  # Start mysql Daemon 
  service mysqld start

  # +--------------------------------------------------+
  # Network settings
  echo -e "$green[EFA]$clean - Setting new hostname"
  sed -i "/^HOSTNAME=/ c\HOSTNAME=$HOSTNAME.$DOMAINNAME" /etc/sysconfig/network
  echo "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4" > /etc/hosts
  echo "$IPADDRESS   $HOSTNAME.$DOMAINNAME   $HOSTNAME" >> /etc/hosts
  hostname $HOSTNAME

  echo -e "$green[EFA]$clean - Setting DNS Servers"
  echo "nameserver $DNS1" > /etc/resolv.dnsmasq
  echo "nameserver $DNS2" >> /etc/resolv.dnsmasq

  echo -e "$green[EFA]$clean - Setting IP settings"
  ifdown $INTERFACE
  # Use ipcalc to get the broadcast & network id's
  BROADCAST="`/bin/ipcalc -b $IPADDRESS $NETMASK`" 
  NETWORK="`/bin/ipcalc -n $IPADDRESS $NETMASK`"
  echo "DEVICE=$INTERFACE" > /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "BOOTPROTO=none" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "$BROADCAST" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "$NETWORK" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "NETMASK=$NETMASK" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "IPADDR=$IPADDRESS" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "GATEWAY=$GATEWAY" >> /etc/sysconfig/network
  ifup $INTERFACE
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # User settings
  echo -e "$green[EFA]$clean - Creating user"
  useradd -m -d /home/$USERNAME -s /bin/bash $USERNAME
  echo "$USERNAME:$efauserpwd" | chpasswd --md5 $USERNAME
  
  echo -e "$green[EFA]$clean - Changing root password"
  echo "root:$efarootpwd" | chpasswd --md5 root
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Generating SSH Host keys"
  rm -f /etc/ssh/ssh_host_rsa_key
  rm -f /etc/ssh/ssh_host_dsa_key
  ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa
  ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Configure timezone"
  rm -f /etc/localtime
  ln -s /usr/share/zoneinfo/$TZONE /etc/localtime
  echo "UTC=$ISUTC">/etc/sysconfig/clock
  echo "ARC=false">>/etc/sysconfig/clock
  echo "ZONE=$TZONE">>/etc/sysconfig/clock
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Write ianacode to freshclam config.
  sed -i "/^#DatabaseMirror / c\DatabaseMirror db.$IANACODE.clamav.net" /etc/freshclam.conf
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Configuring razor"
  su postfix -s /bin/bash -c 'razor-admin -create'
  su postfix -s /bin/bash -c 'razor-admin -register'
  sed -i '/^debuglevel/ c\debuglevel             = 0' /var/spool/postfix/.razor/razor-agent.conf
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Update clamav and spamassassin rules
  echo -e "$green[EFA]$clean - Updating AV and SA rules"
  service dnsmasq start
  sleep 5
  
  service clamd start
  freshclam
  sa-update
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Add the domain of this system to transports
  echo -e "$green[EFA]$clean - Allow the current to receive mails"
  echo "" >> /etc/postfix/transport
  echo "###### START E.F.A ADDED DOMAINS ######" >> /etc/postfix/transport
  echo "$DOMAINNAME  smtp:[$MAILSERVER]" >> /etc/postfix/transport
  rm -f /etc/postfix/transport.db
  postmap /etc/postfix/transport
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Add admin email to receive root mails
  echo "root: $ADMINEMAIL" >> /etc/aliases
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Configuring spamassassin"
  sed -i '/bayes_ignore_header/d' /etc/MailScanner/spam.assassin.prefs.conf
  echo "bayes_ignore_header X-$ORGNAME-MailScanner-EFA">>/etc/MailScanner/spam.assassin.prefs.conf
  echo "bayes_ignore_header X-$ORGNAME-MailScanner-EFA-SpamCheck">>/etc/MailScanner/spam.assassin.prefs.conf
  echo "bayes_ignore_header X-$ORGNAME-MailScanner-EFA-SpamScore">>/etc/MailScanner/spam.assassin.prefs.conf
  echo "bayes_ignore_header X-$ORGNAME-MailScanner-EFA-Information">>/etc/MailScanner/spam.assassin.prefs.conf
  sed -i "/^envelope_sender_header / c\envelope_sender_header X-$ORGNAME-MailScanner-EFA-From" /etc/MailScanner/spam.assassin.prefs.conf
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Configuring MailScanner"
  sed -i "/^%org-name% =/ c\%org-name% = $ORGNAME" /etc/MailScanner/MailScanner.conf
  sed -i "/^%org-long-name% =/ c\%org-long-name% = $ORGNAME" /etc/MailScanner/MailScanner.conf
  sed -i "/^%web-site% =/ c\%web-site% = http://www.efa-project.org" /etc/MailScanner/MailScanner.conf
  sed -i "/^Use Watermarking =/ c\Use Watermarking = yes" /etc/MailScanner/MailScanner.conf
  sed -i "/^Information Header Value =/ c\Information Header Value = Please contact $ADMINEMAIL for more information" /etc/MailScanner/MailScanner.conf
  sed -i "/^Unscanned Header Value =/ c\Unscanned Header Value = Please contact $ADMINEMAIL for details" /etc/MailScanner/MailScanner.conf
  sed -i "/^Hostname =/ c\Hostname = $HOSTNAME.$DOMAINNAME" /etc/MailScanner/MailScanner.conf

  # Configure inline sigs
  echo -e "To: *@$DOMAINNAME /etc/MailScanner/reports/en/inline.sig.in.html" > /etc/MailScanner/rules/sig.html.rules
  echo -e "To: default /etc/MailScanner/reports/en/inline.sig.out.html" >> /etc/MailScanner/rules/sig.html.rules
  echo -e "To: *@$DOMAINNAME /etc/MailScanner/reports/en/inline.sig.in.txt" > /etc/MailScanner/rules/sig.text.rules
  echo -e "To: default /etc/MailScanner/reports/en/inline.sig.out.txt" >> /etc/MailScanner/rules/sig.text.rules

  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Configuring MailWatch"
  sed -i "/^define('QUARANTINE_FROM_ADDR',/ c\define('QUARANTINE_FROM_ADDR', 'postmaster@$DOMAINNAME');" /var/www/html/mailscanner/conf.php
  sed -i "/^define('TIME_ZONE',/ c\define('TIME_ZONE', '$TZONE');" /var/www/html/mailscanner/conf.php
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Give user sudo permissions
  echo "$USERNAME ALL=(ALL) ALL" >> /etc/sudoers.d/EFA-users
  echo "$USERNAME ALL=(ALL) NOPASSWD: /usr/local/sbin/EFA-Configure" >> /etc/sudoers.d/EFA-users
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # create the mailwatch user
  /usr/bin/mysql -u root -p"$initpassword" mailscanner -e "INSERT INTO users SET username = '$USERNAME', password = md5('$efauserpwd'), fullname = 'Administrator', type ='A'"
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Whitelist localhost in mysql for mail releasing etc..
  /usr/bin/mysql -u root -p"$initpassword" mailscanner -e "INSERT INTO whitelist SET to_address = 'default', to_domain = '', from_address = '127.0.0.1'"
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Set timezone in php.ini
  sed -i "/^;date.timezone =/ c\date.timezone = $TZONE" /etc/php.ini
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Set the random passwords
  # sa_user SQL password
  randompw
  SAUSERSQLPWD=$PASSWD
  /usr/bin/mysql -u root -p"$initpassword" -e "UPDATE mysql.user SET Password=PASSWORD('$SAUSERSQLPWD') WHERE User='sa_user';"
  /usr/bin/mysql -u root -p"$initpassword" -e "FLUSH PRIVILEGES;"
  sed -i "/bayes_sql_password/ c\bayes_sql_password              $SAUSERSQLPWD" /etc/MailScanner/spam.assassin.prefs.conf
  sed -i "/user_awl_sql_password/ c\user_awl_sql_password           $SAUSERSQLPWD" /etc/MailScanner/spam.assassin.prefs.conf
  sed -i "/\usr\/bin\/mysql -usa_user / c\\/usr\/bin\/mysql -usa_user -p$SAUSERSQLPWD < \/etc\/trim-awl.sql" /usr/sbin/trim-awl
  
  # mailwatch SQL password
  randompw
  MAILWATCHSQLPWD=$PASSWD
  /usr/bin/mysql -u root -p"$initpassword" -e "UPDATE mysql.user SET Password=PASSWORD('$MAILWATCHSQLPWD') WHERE User='mailwatch';"
  /usr/bin/mysql -u root -p"$initpassword" -e "FLUSH PRIVILEGES;"
  # Issue #66 grab all passwords from /etc/EFA-Config
  #sed -i "/^my(\$db_pass) =/ c\my(\$db_pass) = '$MAILWATCHSQLPWD';" /usr/lib/MailScanner/MailScanner/CustomFunctions/MailWatch.pm
  #sed -i "/^  my(\$db_pass) =/ c\  my(\$db_pass) = '$MAILWATCHSQLPWD';" /usr/lib/MailScanner/MailScanner/CustomFunctions/SQLBlackWhiteList.pm
  #sed -i "/^my(\$db_pass) =/ c\my(\$db_pass) = '$MAILWATCHSQLPWD';" /usr/lib/MailScanner/MailScanner/CustomFunctions/SQLSpamSettings.pm
  #sed -i "/^define('DB_PASS',/ c\define('DB_PASS', '$MAILWATCHSQLPWD');" /var/www/html/mailscanner/conf.php
  
  # sqlgrey SQL password
  randompw
  SQLGREYSQLPWD=$PASSWD
  /usr/bin/mysql -u root -p"$initpassword" -e "UPDATE mysql.user SET Password=PASSWORD('$SQLGREYSQLPWD') WHERE User='sqlgrey';"
  /usr/bin/mysql -u root -p"$initpassword" -e "FLUSH PRIVILEGES;"
  sed -i "/db_pass =/ c\db_pass = $SQLGREYSQLPWD" /etc/sqlgrey/sqlgrey.conf
  #sed -i "/^\$db_pass/ c\$db_pass	= \"$SQLGREYSQLPWD\";" /var/www/html/sgwi/includes/config.inc.php
 
  # efa token SQL password
  randompw
  EFASQLPWD=$PASSWD
  /usr/bin/mysql -u root -p"$initpassword" -e "UPDATE mysql.user SET Password=PASSWORD('$EFASQLPWD') WHERE User='efa';"
  /usr/bin/mysql -u root -p"$initpassword" -e "FLUSH PRIVILEGES;"
  # Issue #66 grab all passwords from /etc/EFA-Config
  #sed -i "/^  my(\$db_pass) =/ c\  my(\$db_pass) = '$EFASQLPWD';" /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm
  #sed -i "/^\$db_pass =/ c\\\$db_pass = \"$EFASQLPWD\";" /var/www/cgi-bin/release-msg.cgi
  #sed -i "/^\$db_pass =/ c\\\$db_pass = \"$EFASQLPWD\";" /var/www/cgi-bin/learn-msg.cgi
  #sed -i "/^my(\$db_pass) =/ c\my(\$db_pass) = '$EFASQLPWD';" /etc/cron.daily/EFA-Tokens-Cron
 
  # Issue #95 SASL AUthentication database not found
  # We just create a dummy sasldb2 with a random pwd
  randompw
  RANDOMSASLPWD=$PASSWD
  echo $RANDOMSASLPWD | saslpasswd2 -p -c /etc/sasldb2
  chgrp postfix /etc/sasldb2
 
  # And finally we change the MYSQL root password.
  randompw
  MYSQLROOTPWD=$PASSWD
  /usr/bin/mysqladmin -u root -p$initpassword password "$MYSQLROOTPWD"

  # Change watermark secret
  randompw
  WATERMARK=$PASSWD
  sed -i "/^Watermark Secret =/ c\Watermark Secret = %org-name%-$WATERMARK" /etc/MailScanner/MailScanner.conf
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Install Vmware Tools
# +---------------------------------------------------+
func_Install-VmwareTools(){
  func_echo-header
  echo -e "$green[EFA]$clean Starting the installation of vmware tools"
  echo -e "$green[EFA]$clean Depending on the speed of your system this"
  echo -e "$green[EFA]$clean might take a while."
  pause
  cd /usr/src/EFA
  yum -y install glib2-devel pam-devel libdnet-devel gcc-c++ libicu-devel
  wget $mirror/$mirrorpath/open-vm-tools-9.4.0-1280544.tar.gz
  tar xvzf open-vm-tools-9.4.0-1280544.tar.gz
  cd open-vm-tools-9.4.0-1280544
  ./configure --without-x
  make
  make install
  /usr/bin/wget -O /etc/init.d/vmtoolsd $gitdlurl/EFA/vmtoolsd.init
  chmod 755 /etc/init.d/vmtoolsd
  # lib adjustment
  ln -s /usr/lib64/libdnet.so.1 /usr/lib64/libdnet.1
  chkconfig vmtoolsd on
  service vmtoolsd start
  func_echo-header
  echo -e "$green[EFA]$clean Installation of VMware tools completed"
  pause
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# The final settings
# +---------------------------------------------------+
function func_end() {
  func_echo-header
  # +--------------------------------------------------+
  # Postfix SSL certificate
  echo -e "$green[EFA]$clean We will now generate an new SSL Certificate"
  echo -e "$green[EFA]$clean for postfix, please answer all answers."
  pause
  cd /etc/postfix/ssl
  openssl req -new -x509 -nodes -out smtpd.pem -keyout smtpd.pem -days 3650 
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+  
  # Remove the first time login message from console.
  sed -i "/^First time login: /d" /etc/issue    
  
  # Remove EFA-Init from console
  sed -i "/^\/usr\/local\/sbin\/EFA-Init/d" /root/.bashrc
  
  # Add EFA-Configure to user logon
  #sed -i '1i\sudo \/usr\/local\/sbin\/EFA-Configure' /home/$USERNAME/.bashrc
  #Issue #70 .bashrc EFA-Configure Launch Interactive Only
  sed -i "1i\if ! [ -z \"\$PS1\" ]; then\n  sudo \/usr\/local\/sbin\/EFA-Configure\nfi" /home/$USERNAME/.bashrc
  
  # Add EFA-Configure to root logon
  # Issue #6: adcc hanging system on start after latest build
  # sed -i '1i\sudo \/usr\/local\/sbin\/EFA-Configure' /root/.bashrc
  # +--------------------------------------------------+
    
  # +--------------------------------------------------+
  # Write all settings to EFA-Config
  echo "HOSTNAME:$HOSTNAME" >> /etc/EFA-Config
  echo "DOMAINNAME:$DOMAINNAME" >> /etc/EFA-Config
  echo "ADMINEMAIL:$ADMINEMAIL" >> /etc/EFA-Config
  echo "INTERFACE:$INTERFACE" >> /etc/EFA-Config
  echo "IPADDRESS:$IPADDRESS" >> /etc/EFA-Config
  echo "NETMASK:$NETMASK" >> /etc/EFA-Config
  echo "GATEWAY:$GATEWAY" >> /etc/EFA-Config
  echo "DNS1:$DNS1" >> /etc/EFA-Config
  echo "DNS2:$DNS2" >> /etc/EFA-Config
  echo "IANA:$IANACODE" >> /etc/EFA-Config
  echo "MAILSERVER:$MAILSERVER" >> /etc/EFA-Config
  echo "ORGNAME:$ORGNAME" >> /etc/EFA-Config
  echo "SAUSERSQLPWD:$SAUSERSQLPWD" >> /etc/EFA-Config
  echo "MAILWATCHSQLPWD:$MAILWATCHSQLPWD" >> /etc/EFA-Config
  echo "SQLGREYSQLPWD:$SQLGREYSQLPWD" >> /etc/EFA-Config
  echo "EFASQLPWD:$EFASQLPWD" >> /etc/EFA-Config
  echo "MYSQLROOTPWD:$MYSQLROOTPWD" >> /etc/EFA-Config

  if [[ "$enableupdates" -eq 1 ]]; then 
    echo "AUTOUPDATES:ENABLED" >> /etc/EFA-Config
  else
    echo "AUTOUPDATES:DISABLED" >> /etc/EFA-Config
  fi
  
  sed -i "/CONFIGURED:/ c\CONFIGURED:YES" /etc/EFA-Config
  
  chown root:apache /etc/EFA-Config
  chmod 640 /etc/EFA-Config
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+  
  # Enable services at boot
  chkconfig MailScanner on
  chkconfig httpd on
  chkconfig mysqld on
  chkconfig dnsmasq on
  chkconfig saslauthd on
  chkconfig crond on
  chkconfig clamd on
  chkconfig sqlgrey on
  chkconfig mailgraph-init on
  chkconfig adcc on
  chkconfig webmin on
  chkconfig ntpd on
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Synchronize time
  ntpdate 0.centos.pool.ntp.org
  hwclock --systohc  
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # set nameserver to local dnsmasq
  echo "nameserver 127.0.0.1" > /etc/resolv.conf
  # +--------------------------------------------------+
  
  # Cleanup /var/log/EFA 
  rm -f /var/log/EFA/*
  
  # And the end.. we are done.. whooo!
  func_echo-header
  echo -e "$green[EFA]$clean All settings applied rebooting when you press enter."
  pause
  reboot
  # +--------------------------------------------------+
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to determine the available interfaces.
# +---------------------------------------------------+
func_interfaces(){
  nrintf=`cat /proc/net/dev | grep eth | sed 's/:/ /g' | awk {'print $1 '} | wc -l`
  interf=`cat /proc/net/dev | grep eth | sed 's/:/ /g' | awk {'print $1 '}`

  if [ $nrintf -gt 1 ]
        then
          echo -e "$green[EFA]$clean You seem to have multiple network interfaces"
          echo -e "$green[EFA]$clean The interface names on your machine are:"
          for int in $interf
            do
                  echo " - $int"
          done

          local choice
          echo -e "$green[EFA]$clean Enter the primary interface name"
          echo -e -n "$green[EFA]$clean : "
      read choice
          choice_check=0
          
      for int in $interf
        do
          if [ $int == $choice ]
            then
              choice_check=1
          fi
        done

      # Check if the user typed a interface that exists.
      if [ $choice_check -eq 0 ]
        then
          echo -e "$green[EFA]$clean ERROR, That interface does not exist."
          echo -e "$green[EFA]$clean Staring over."
          sleep 2
          func_interfaces
          return
      fi

      if [ $choice_check -eq 1 ]
        then
          echo -e "$green[EFA]$clean Thank you, using $choice as the primary interface"
          INTERFACE=$choice
      fi
  else
    echo -e "$green[EFA]$clean Your interface seems to be '$interf', using $interf as primary interface"
    INTERFACE=$interf
fi
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to test IP addresses
# +---------------------------------------------------+
function checkip()
{
  local  ip=$1
  local  stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  return $stat
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to create a random password
# +---------------------------------------------------+
function randompw()
{
  PASSWD=""
  PASSWD=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Trap CTRL+C, CTRL+Z and quit singles
# +---------------------------------------------------+
if [ $debug == "0" ]; then
    trap '' SIGINT SIGQUIT SIGTSTP
fi
# +---------------------------------------------------+

# +---------------------------------------------------+
# Pause
# +---------------------------------------------------+
pause(){
    echo -e "$green[EFA]$clean Press [Enter] key to continue..."
    read fackEnterKey
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# The header above all menu's
# +---------------------------------------------------+
func_echo-header(){
    clear
    echo -e "--------------------------------------------------------------"
    echo -e "---        Welcome to the EFA Initial Configuration        ---"
    echo -e "---                http://www.efa-project.org              ---"
    echo -e "--------------------------------------------------------------"
    echo ""
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Where to start
# +---------------------------------------------------+
clear
red='\E[00;31m'
green='\E[00;32m'
yellow='\E[00;33m'
blue='\E[00;34m'
magenta='\E[00;35'
cyan='\E[00;36m'
clean='\e[00m'

func_echo-header
CONFIGURED="`grep CONFIGURED /etc/EFA-Config | sed 's/^.*://'`" 
if [ $CONFIGURED == "NO" ]
 then
    echo -e "--------------------------------------------------------------"
    echo -e "$green[EFA]$clean We will ask you a few questions to setup this system."
    echo -e "$green[EFA]$clean Please make sure the system is connected to the internet."
    echo -e "--------------------------------------------------------------"
	echo -e -n "$green[EFA]$clean Start EFA first-time configure (Y/n) -> "
	read StartConf
	
	if [[ "$StartConf" == "Y" || "$StartConf" == "y" || "$StartConf" == "" ]]; then 
        pause
		func_ask-hostname
		func_ask-domainname
		func_ask-adminemail
		func_ask-ipaddress
		func_ask-netmask
		func_ask-gateway
		func_ask-dns1
		func_ask-dns2
		func_ask-username
		func_ask-userpassword
		func_ask-rootpassword
		func_detect-virtual
		func_ask-timezone
		func_ask-keyboard
		func_ask-ianacode
		func_ask-mailserver
		func_ask-orgname
		func_ask-updates
		func_verify-settings
		func_configure-system
		if [[ "$InstallVmwareTools" -eq 1 ]]; then func_Install-VmwareTools; fi
		func_end
    elif [[ "$StartConf" == "N" || "$StartConf" == "n" ]]; then 
		echo -e "$red"
		echo -e "You are now aborting EFA-Init, your system will not function properly."
		echo -e "Please run /usr/local/sbin/EFA-Init to start the first-time configuration again."
		echo -e ""
		echo -e "Aborting EFA-Init now. $clean"
		exit 0
	else
		echo -e "       $red ERROR: please make an selection.$clean"
		echo -e -n "$green[EFA]$clean Start EFA first-time configure (Y/n) -> "
		read StartConf
    fi  
 else
    echo -e "$red         ERROR: EFA is already configured $clean"
    echo -e "$red         Please use EFA-Configure $clean"
    echo -e ""
    exit 0
fi
# EOF
