#!/bin/bash
# +--------------------------------------------------------------------+
# EFA-Init
# Version 20140103
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2013  http://www.efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

# todo:
# Detect host type, if vmware install vmware tools, hyper-v is already build in default centos kernel.
# time/timezone selection
# Write auto generated password for mysql root
# Write auto generated password for mysql sa_user
# Write auto generated password for mysql mailwatch
# Write auto generated password for mysql sqlgrey
# Give user sudo rights
# 
debug="1"
# +---------------------------------------------------+
# Lets start asking questions.
# +---------------------------------------------------+
function func_ask-hostname() {
  func_echo-header
  echo -e "$green[EFA]$clean What is the hostname of this machine? $cyan(Single Word)$clean"
  echo -e -n "$green[EFA]$clean : "
  read HOSTNAME
  hncheck=1
  while [ $hncheck != 0 ]
   do
     if [[ $HOSTNAME =~ ^[-a-zA-Z0-9]{2,256}+$ ]]
      then
        hncheck=0
      else
        echo -e "       $red ERROR: The hostname $HOSTNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the hostname$clean"
        echo -e "$green[EFA]$clean What is the hostname of this machine: $cyan(single Word)$clean"
        echo -e -n "$green[EFA]$clean : "
        read HOSTNAME
     fi
    done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-domainname() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the domain name for this machine"
  echo -e -n "$green[EFA]$clean : "
  read DOMAINNAME
  dncheck=1
  while [ $dncheck != 0 ]
   do
     if [[ $DOMAINNAME =~ ^[a-zA-Z0-9]+([\-\.]{1}[a-zA-Z0-9]+)*\.[a-z]{2,6}$ ]]
      then
        dncheck=0
      else
        echo -e "       $red ERROR: The domain $DOMAINNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the domain$clean"
        echo -e "$green[EFA]$clean Please enter the domain name for this machine"
        echo -e -n "$green[EFA]$clean : "
        read DOMAINNAME
     fi
    done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-adminemail() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the email address of an admin "
  echo -e "$green[EFA]$clean This user will receive E.F.A. related notifications"
  echo -e -n "$green[EFA]$clean : "
  read ADMINEMAIL
  adminemailcheck=1
  while [ $adminemailcheck != 0 ]
   do
     if [[ $ADMINEMAIL =~ ^[-_.@Aa-zA-Z0-9]{2,256}+[a-zA-Z0-9]+([\-\.]{1}[a-zA-Z0-9]+)*\.[a-z]{2,6}$ ]]
      then
        adminemailcheck=0
      else
        echo -e "       $red ERROR: The address $ADMINEMAIL seems to be invalid"
        echo -e "        ERROR: please re-enter the admin email address$clean"
        echo -e "$green[EFA]$clean Please enter the email address of an admin "
        echo -e "$green[EFA]$clean This user will receive EFA related notifications"
        echo -e -n "$green[EFA]$clean : "
        read ADMINEMAIL
     fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-ipaddress() {
  func_echo-header
  # Get the primary interface
  func_interfaces
  
  # Get the IP and validate it
  echo -e ""
  echo -e "$green[EFA]$clean Please enter the IP address"
  echo -e -n "$green[EFA]$clean : "
  read IPADDRESS
  ipcheck=1
  while [ $ipcheck != 0 ]
   do
    if checkip $IPADDRESS
     then
       ipcheck=0
     else
       echo -e "       $red ERROR: The IP $IPADDRESS seems to be invalid"
       echo -e "        ERROR: Please re-enter the IP$clean"
       echo -e "$green[EFA]$clean Please enter the IP address"
       echo -e -n "$green[EFA]$clean : "
       read IPADDRESS
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-netmask() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the NETMASK"
  echo -e -n "$green[EFA]$clean : "
  read NETMASK
  nmcheck=1
  while [ $nmcheck != 0 ]
   do
    if checkip $NETMASK
     then
       nmcheck=0
     else
       echo -e "       $red ERROR: The NETMASK $NETMASK seems to be invalid"
       echo -e "        ERROR: Please re-enter the NETMASK$clean"
       echo -e "$green[EFA]$clean Please enter the NETMASK"
       echo -e -n "$green[EFA]$clean : "
       read NETMASK
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-gateway() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the default gateway address"
  echo -e -n "$green[EFA]$clean : "
  read GATEWAY
  gwcheck=1
  while [ $gwcheck != 0 ]
   do
    if checkip $GATEWAY
     then
       gwcheck=0
     else
       echo -e "       $red ERROR: The GATEWAY $GATEWAY seems to be invalid"
       echo -e "        ERROR: Please re-enter the GATEWAY$clean"
       echo -e "$green[EFA]$clean Please enter the default gateway address"
       echo -e -n "$green[EFA]$clean : "
       read GATEWAY
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-dns1() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the primary DNS server address"
  echo -e -n "$green[EFA]$clean : "
  read DNS1
  dns1check=1
  while [ $dns1check != 0 ]
   do
    if checkip $DNS1
     then
       dns1check=0
     else
       echo -e "       $red ERROR: The DNS server $DNS1 seems to be invalid"
       echo -e "        ERROR: Please re-enter the primary DNS$clean"
       echo -e "$green[EFA]$clean Please enter the primary DNS server address"
       echo -e -n "$green[EFA]$clean : "
       read DNS1
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-dns2() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the secondary DNS server address"
  echo -e -n "$green[EFA]$clean : "
  read DNS2
  dns2check=1
  while [ $dns2check != 0 ]
   do
    if checkip $DNS2
     then
       dns2check=0
     else
       echo -e "       $red ERROR: The DNS server $DNS2 seems to be invalid"
       echo -e "        ERROR: Please re-enter the secondary DNS$clean"
       echo -e "$green[EFA]$clean Please enter the secondary DNS server address"
       echo -e -n "$green[EFA]$clean : "
       read DNS2
    fi
   done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-username() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the user-name you would like to have."
  echo -e "$green[EFA]$clean This user will be granted SSH access to the system."
  echo -e -n "$green[EFA]$clean : "
  read USERNAME
  uncheck=1
  while [ $uncheck != 0 ]
   do
     if [[ $USERNAME =~ ^[a-z_][a-z0-9_-]{1,30}+$ ]]
      then
        uncheck=0
      else
        echo -e "       $red ERROR: The user-name $USERNAME seems to be invalid"
        echo -e "        ERROR: please re-enter the user-name$clean"
        echo -e "$green[EFA]$clean Please enter the user-name you would like to have."
        echo -e -n "$green[EFA]$clean : "
        read USERNAME
     fi
    done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-userpassword() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the password for the local user."
  echo -e "$green[EFA]$clean This password will also be used to logon to the webinterface"
  echo -e -n "$green[EFA]$clean Password: "
  read -s efauserpwd
  echo -e ""
  echo -e -n "$green[EFA]$clean Password Again: "
  read -s efauserpwd2
  efauserpwdcheck=1
  while [ $efauserpwdcheck != 0 ]
   do
     if [[ $efauserpwd = "$efauserpwd2" ]]
          then
            efauserpwdcheck=0
         else 
            echo -e ""
            echo -e "       $red ERROR: The passwords do not seem to match"
            echo -e "        ERROR: Please try again$clean"
            echo -e "$green[EFA]$clean Please enter the password for the local user."
            echo -e -n "$green[EFA]$clean Password: "
            read -s efauserpwd
            echo -e ""
            echo -e -n "$green[EFA]$clean Password Again: "
            read -s efauserpwd2
     fi
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
function func_ask-rootpassword() {
  func_echo-header
  echo -e "$green[EFA]$clean Please enter the password for the root user."
  echo -e "$green[EFA]$clean This password is needed in case something goes"
  echo -e "$green[EFA]$clean wrong and you need to recover the system."
  echo -e ""
  echo -e "$green[EFA]$clean Please make this password long, strong and"
  echo -e "$green[EFA]$clean different from the user password."
  echo -e -n "$green[EFA]$clean Password: "
  read -s efarootpwd
  echo -e ""
  echo -e -n "$green[EFA]$clean Password Again: "
  read -s efarootpwd2
  efarootpwdcheck=1
  while [ $efarootpwdcheck != 0 ]
   do
     if [[ $efarootpwd = "$efarootpwd2" ]]
          then
            efarootpwdcheck=0
         else 
            echo -e ""
            echo -e "       $red ERROR: The passwords do not seem to match"
            echo -e "        ERROR: Please try again$clean"
            echo -e "$green[EFA]$clean Please enter the password for the root user."
            echo -e -n "$green[EFA]$clean Password: "
            read -s efarootpwd
            echo -e ""
            echo -e -n "$green[EFA]$clean Password Again: "
            read -s efarootpwd2
     fi
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# detect virtual system
# +---------------------------------------------------+
function func_detect-virtual() {
  func_echo-header
  echo -e "$green[EFA]$clean Checking host type"
  # This is a bit tricky as there is no uniform way to see what host type is used.
  # The VGA interface seems to be pretty unique tough so checking that for now.
  AreWeVMware="`/sbin/lspci | grep VGA | grep VMware`"
  if [ -n "${AreWeVMware##+([[:space:]])}"  ];then
    echo -e "$green[EFA]$clean You seem to be running on VMware"
    echo -e "$green[EFA]$clean would you like me to install VMware tools?"
    echo -e -n "$green[EFA]$clean [Y/n]:"
    read VMwareInstallChoice
    if [[ $VMwareInstallChoice == "" || $VMwareInstallChoice == "Y" || $VMwareInstallChoice == "y" ]]; then
      InstallVmwareTools="1"
    else
      InstallVmwareTools="0"
    fi
  else
    echo -e "$green[EFA]$clean You don't seem to be running VMware"
    echo -e "$green[EFA]$clean in that case nothing to do, moving on.."
    pause
  fi
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Verify the settings
# +---------------------------------------------------+
function func_verify-settings() {
  verifymenu=1
  while [ $verifymenu == "1" ]
   do
    func_echo-header
    echo -e "--------------------------------------------------------------"
    echo -e "$green[EFA]$clean Thank you, the following settings have been gathered:"
    echo -e " "
    echo -e "1)  Hostname       : $HOSTNAME"
    echo -e "2)  Domainname     : $DOMAINNAME"
    echo -e "3)  Admin Email    : $ADMINEMAIL"
    echo -e "4)  Interface      : $INTERFACE"
    echo -e "5)  IP address     : $IPADDRESS"
    echo -e "6)  Netmask        : $NETMASK"
    echo -e "7)  Gateway        : $GATEWAY"
    echo -e "8)  Primary DNS    : $DNS1"
    echo -e "9)  Secondary DNS  : $DNS2"
    echo -e "10) User           : $USERNAME"
    echo -e "11) User PWD       : <hidden>"
    echo -e "12) Admin PWD      : <hidden>"
    echo -e -n "13) VMware Tools   : "; if [[ "$InstallVmwareTools" -eq 1 ]]; then echo "Install"; else echo "Not needed"; fi
    echo -e "--------------------------------------------------------------"
    echo -e ""
    echo -e "$green[EFA]$clean If these settings are correct type 'OK' to continue."
    echo -e "$green[EFA]$clean if there is an error enter the number you want to change."
    echo -e -n "$green[EFA]$clean : "
    local choice
    read choice
    case $choice in
                1)        func_ask-hostname
                        ;;
                2)        func_ask-domainname
                        ;;
                3)        func_ask-adminemail
                        ;;
                4)        func_ask-ipaddress
                        ;;
                5)        func_ask-ipaddress
                        ;;
                6)        func_ask-netmask
                        ;;
                7)        func_ask-gateway
                        ;;
                8)        func_ask-dns1
                        ;;
                9)        func_ask-dns2
                        ;;
                10)       func_ask-username
                        ;;
                11)       func_ask-userpassword
                        ;;
                12)       func_ask-rootpassword
                        ;;
                13)       func_detect-virtual
                        ;;
                OK)        verifymenu=0
                        ;;
                ok)        verifymenu=0
                        ;;
    esac
  done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Configure system
# +---------------------------------------------------+
function func_configure-system() {
  func_echo-header
  echo -e "$green[EFA]$clean Configuring system"

  # +--------------------------------------------------+
  # Network settings
  echo -e "$green[EFA]$clean - Setting new hostname"
  sed -i "/^HOSTNAME=/ c\HOSTNAME=$HOSTNAME.$DOMAINNAME" /etc/sysconfig/network
  echo "$IPADDRESS              $HOSTNAME.$DOMAINNAME   $HOSTNAME" >> /etc/hosts
  hostname $HOSTNAME

  echo -e "$green[EFA]$clean - Setting DNS Servers"
  echo "nameserver $DNS1" >> /etc/resolv.conf
  echo "nameserver $DNS2" >> /etc/resolv.conf

  echo -e "$green[EFA]$clean - Setting IP settings"
  # Use ipcalc to get the broadcast & network id's
  BROADCAST="`/bin/ipcalc -b $IPADDRESS $NETMASK`"
  NETWORK="`/bin/ipcalc -n $IPADDRESS $NETMASK`"
  echo "DEVICE=\"$INTERFACE\"" > /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "BOOTPROTO=\"none\"" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "ONBOOT=\"yes\"" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "$BROADCAST" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "$NETWORK" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "NETMASK=\"$NETMASK\"" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "IPADDR=\"$IPADDRESS\"" >> /etc/sysconfig/network-scripts/ifcfg-$INTERFACE
  echo "GATEWAY=$GATEWAY" >> /etc/sysconfig/network
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # User settings
  echo -e "$green[EFA]$clean - Creating user"
  useradd -m -d /home/$USERNAME -s /bin/bash $USERNAME
  echo "$USERNAME:$efauserpwd" | chpasswd --md5 $USERNAME
  
  echo -e "$green[EFA]$clean - Changing root password"
  echo "root:$efarootpwd" | chpasswd --md5 root
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Generating SSH Host keys"
  ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa
  ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  echo -e "$green[EFA]$clean - Configuring razor"
  su postfix -s /bin/bash -c 'razor-admin -create'
  su postfix -s /bin/bash -c 'razor-admin -register'
  sed -i '/^debuglevel/ c\debuglevel             = 0' /var/spool/postfix/.razor/razor-agent.conf
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # Update clamav and spamassassin rules
  echo -e "$green[EFA]$clean - Updating AV and SA rules"
  service clamd start
  freshclam
  sa-update
  # +--------------------------------------------------+
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Install Vmware Tools if needed
# +---------------------------------------------------+
func_Install-VmwareTools(){
  echo -e "$green[EFA]$clean Installing vmware tools"
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# The final settings
# +---------------------------------------------------+
function func_end() {
  
  # Remove the first time login message from console.
  sed -i "/^First time login: /d" /etc/issue

  func_echo-header
  echo -e "$green[EFA]$clean We will now generate an new SSL Certificate"
  echo -e "$green[EFA]$clean for postfix, please answer all answers."
  pause
  cd /etc/postfix/ssl
  openssl req -new -x509 -nodes -out smtpd.pem -keyout smtpd.pem -days 3650 
    
  # +--------------------------------------------------+
  # Write all settings to EFA-Config
  touch /etc/EFA-Config
  echo "HOSTNAME:$HOSTNAME" >> /etc/EFA-Config
  echo "DOMAINNAME:$DOMAINNAME" >> /etc/EFA-Config
  echo "ADMINEMAIL:$ADMINEMAIL" >> /etc/EFA-Config
  echo "INTERFACE:$INTERFACE" >> /etc/EFA-Config
  echo "IPADDRESS:$IPADDRESS" >> /etc/EFA-Config
  echo "NETMASK:$NETMASK" >> /etc/EFA-Config
  echo "GATEWAY:$GATEWAY" >> /etc/EFA-Config
  echo "DNS1:$DNS1" >> /etc/EFA-Config
  echo "DNS2:$DNS2" >> /etc/EFA-Config
  chmod 600 /etc/EFA-Config
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+  
  # Enable services at boot
  chkconfig MailScanner on
  chkconfig httpd on
  chkconfig mysqld on
  chkconfig named on
  chkconfig saslauthd on
  chkconfig crond on
  chkconfig clamd on
  chkconfig sqlgrey on
  chkconfig mailgraph-init on
  chkconfig adcc on
  chkconfig webmin on
  # +--------------------------------------------------+
  
  # +--------------------------------------------------+
  # And the end.. we are done.. whooo!
  func_echo-header
  echo -e "$green[EFA]$clean All settings applied rebooting when you press enter."
  pause
  # todo disabled for testing..
  # reboot
  # +--------------------------------------------------+
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to determine the available interfaces.
# +---------------------------------------------------+
func_interfaces(){
  nrintf=`cat /proc/net/dev | grep eth | sed 's/:/ /g' | awk {'print $1 '} | wc -l`
  interf=`cat /proc/net/dev | grep eth | sed 's/:/ /g' | awk {'print $1 '}`

  if [ $nrintf -gt 1 ]
        then
          echo -e "$green[EFA]$clean You seem to have multiple network interfaces"
          echo -e "$green[EFA]$clean The interface names on your machine are:"
          for int in $interf
            do
                  echo " - $int"
          done

          local choice
          echo -e "$green[EFA]$clean Enter the primary interface name"
          echo -e -n "$green[EFA]$clean : "
      read choice
          choice_check=0
          
      for int in $interf
        do
          if [ $int == $choice ]
            then
              choice_check=1
          fi
        done

      # Check if the user typed a interface that exists.
      if [ $choice_check -eq 0 ]
        then
          echo -e "$green[EFA]$clean ERROR, That interface does not exist."
          echo -e "$green[EFA]$clean Staring over."
          sleep 2
          func_interfaces
          return
      fi

      if [ $choice_check -eq 1 ]
        then
          echo -e "$green[EFA]$clean Thank you, using $choice as the primary interface"
          INTERFACE=$choice
      fi
  else
    echo -e "$green[EFA]$clean Your interface seems to be '$interf', using $interf as primary interface"
    INTERFACE=$interf
fi
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to test IP addresses
# +---------------------------------------------------+
function checkip()
{
  local  ip=$1
  local  stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  return $stat
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to create a random password
# +---------------------------------------------------+
function randompw()
{
    PASSWD=""
    PASSWD=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Trap CTRL+C, CTRL+Z and quit singles
# +---------------------------------------------------+
if [ $debug == "0" ]; then
    trap '' SIGINT SIGQUIT SIGTSTP
fi
# +---------------------------------------------------+

# +---------------------------------------------------+
# Pause
# +---------------------------------------------------+
pause(){
    echo -e "$green[EFA]$clean Press [Enter] key to continue..."
    read fackEnterKey
}
# +---------------------------------------------------+

func_echo-header(){
    clear
    echo -e "--------------------------------------------------------------"
    echo -e "---        Welcome to the EFA Initial Configuration        ---"
    echo -e "---                http://www.efa-project.org              ---"
    echo -e "--------------------------------------------------------------"
    echo ""
}

# +---------------------------------------------------+
# Where to start
# +---------------------------------------------------+
clear
red='\E[00;31m'
green='\E[00;32m'
yellow='\E[00;33m'
blue='\E[00;34m'
magenta='\E[00;35'
cyan='\E[00;36m'
clean='\e[00m'

func_echo-header
if [ ! -e /etc/EFA-Config ]
 then
    echo -e "--------------------------------------------------------------"
    echo -e "$green[EFA]$clean We will ask you a few questions to setup this system."
    echo -e "$green[EFA]$clean Please make sure the system is connected to the internet."
    echo -e "--------------------------------------------------------------"
    pause
    func_ask-hostname
    func_ask-domainname
    func_ask-adminemail
    func_ask-ipaddress
    func_ask-netmask
    func_ask-gateway
    func_ask-dns1
    func_ask-dns2
    func_ask-username
    func_ask-userpassword
    func_ask-rootpassword
    func_detect-virtual
    func_verify-settings
    func_configure-system
    if [[ "$InstallVmwareTools" -eq 1 ]]; then func_Install-VmwareTools; fi
    func_end
 else
    echo -e "$red         ERROR: EFA is already configured $clean"
    echo -e "$red         Please use EFA-Configure $clean"
    echo -e ""
    exit 0
fi
# EOF