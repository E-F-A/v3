#!/bin/bash
# +--------------------------------------------------------------------+
# EFA update script
# Version 20150607
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2015 https://efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

#----------------------------------------------------------------#
# Variables
#----------------------------------------------------------------#
VERSION="3.0.0.9"
logdir="/var/log/EFA"
yumexclude="kernel* mysql* postfix* mailscanner* clamav* clamd* open-vm-tools*"
ADMINEMAIL="`cat /etc/EFA-Config | grep ADMINEMAIL | sed 's/.*://'`"
MAILFROM="$ADMINEMAIL"
MAILTO="$ADMINEMAIL"
MAILSUBJECT="EFA Update Complete For: `hostname`"
SENDMAIL="/usr/lib/sendmail"
TMPMAIL="/tmp/tempmail"
STAGING="/tmp/EFA-Staging"
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# List of current version numbers in this E.F.A. Version.
#----------------------------------------------------------------#
MAILWATCHVERSION="20f37a1ecb"
IMAGECEBERUSVERSION="1.1"
SPAMASSASSINVERSION="3.4.0a"
PYZORVERSION="0.7.0"
WEBMINVERSION="1.690-1"
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function where we do all our magic
#----------------------------------------------------------------#
function run_update() {
  echo "Starting update to E.F.A. $VERSION"

  # To package for this update:
  # /EFA-Version-Upgrade                              <- This file in the root, renamed!
  # /Files/                                           <- Directory (containing binary files)
  # /Files/EFA.repo                                   <- EFA repo file
  # /Scripts/                                         <- Directory (containing update scripts (previous git scripts))
  # /Scripts/lib-EFA-Configure                        <- Complete EFA-Configure dir with all files
  # /Scripts/EFA-Configure                            <- EFA-Configure script

  ##### Backup Phase #####
  /usr/local/sbin/EFA-Backup -backup

  ##### Commit Phase #####

  # grab latest version of EFA-Configure with libraries
  rm -f /usr/local/sbin/EFA-Configure
  rm -rf /var/EFA/lib/EFA-Configure/
  cp $STAGING/Scripts/EFA-Configure /usr/local/sbin/EFA-Configure
  mkdir -p /var/EFA/lib/EFA-Configure
  cp $STAGING/Scripts/lib-EFA-Configure/* /var/EFA/lib/EFA-Configure/
  chmod 700 /usr/local/sbin/EFA-Configure
  chmod 600 /var/EFA/lib/EFA-Configure/*

  # Remove packages from rpmforge and install from EFA (to fix dependency issues between rpmforge & EPEL)
  yum -y remove perl-Convert-TNEF perl-IO-Multiplex perl-Net-Server re2c unrar perl-IP-Country perl-Mail-SPF-Query perl-Net-Ident perl-Mail-ClamAV rpmforge-release
  cp $STAGING/Files/EFA.repo /etc/yum.repos.d/EFA.repo
  yum clean all
  yum_update
  yum -y install perl-Convert-TNEF perl-IO-Multiplex perl-Net-Server re2c unrar perl-IP-Country perl-Mail-SPF-Query perl-Net-Ident perl-Mail-ClamAV

  # Install munin for system stats
  yum -y install munin
  chkconfig munin-node on
  randompw
  MUNINPWD=$PASSWD
  htpasswd -b /etc/munin/munin-htpasswd munin $MUNINPWD
  sed -i '/^my $graph_width = / c\my $graph_width = $ENV{'"'graph_width'"'} ? $ENV{'"'graph_width'"'} : 800;' /usr/share/munin/plugins/diskstats
  sed -i 's/.*#max_size_y 4000/&\ngraph_width 800/' /etc/munin/munin.conf
  echo "MUNINPWD:$MUNINPWD" >> /etc/EFA-Config
  # write new munin apache config file
  cat > /etc/httpd/conf.d/munin.conf << 'EOF'
<directory /var/www/html/munin/localhost/localhost>
    Order allow,deny
    Allow from all
    Satisfy any
</directory>

<directory /var/www/html/munin>
    AuthUserFile /etc/munin/munin-htpasswd
    AuthName "Munin"
    AuthType Basic
    require valid-user
</directory>
EOF
  # End writing apache config file

  service munin-node start
  service httpd restart

  # Issue #197 EFA-Backup for Unbound
  rm -f /usr/local/bin/EFA-Backup
  cp $STAGING/Scripts/EFA-Backup /usr/local/bin

  # Issue #194 mtalog is empty -- install postfix relay script
  mailwatchpw=$(grep MAILWATCHSQLPWD /etc/EFA-Config | sed s/^.*://)
  mysql -u mailwatch -p $mailwatchpw mailscanner < /usr/local/bin/mailwatch/tools/Postfix_relay/create_relay_postfix.sql
########################################################################
  cat > /etc/cron.hourly/mailwatch_relay.sh << 'EOF'
#!/bin/bash

/usr/bin/php /var/www/html/mailscanner/postfix_relay.php --refresh
/usr/bin/php /var/www/html/mailscanner/mailscanner_relay.php --refresh
EOF
########################################################################
  chmod 755 /etc/cron.hourly/mailwatch_relay.sh

  # Issue 203 Notify Senders sed replace issue in 3.0.0.8
  # Test for issue
  if [[ $(grep -o '^Notify Senders =' /etc/MailScanner/MailScanner.conf | wc -l) -eq 5 ]]; then
    awk '{if(/^Notify Senders =/) count++; \
      if(count==2) { sub(/^Notify Senders =.*$/,"Notify Senders Of Viruses = no"); print; } \
      else if(count==3) { sub(/^Notify Senders =.*$/,"Notify Senders Of Blocked Filenames Or Filetypes = yes"); print; } \
      else if(count==4) { sub(/^Notify Senders =.*$/,"Notify Senders Of Blocked Size Attachments = no"); print; } \
      else if(count==5) { sub(/^Notify Senders =.*$/,"Notify Senders Of Other Blocked Content = yes"); print; } \
      else print;}' /etc/MailScanner/MailScanner.conf > /etc/MailScanner/MailScanner.conf.tmp
    rm -f /etc/MailScanner/MailScanner.conf
    mv /etc/MailScanner/MailScanner.conf.tmp /etc/MailScanner/MailScanner.conf
  fi

  # Issue 200 Unrar v5 support (mailscanner backport)
  rm -f /usr/lib/MailScanner/MailScanner/Message.pm
  cp $STAGING/Files/Message.pm /usr/lib/MailScanner/MailScanner/Message.pm

  update-vmtools

  # Update MailWatch to latest version
  update-mailwatch

  echo "$VERSION update is complete"
  echo ""
  echo "" >> $TMPMAIL
  echo "Update to $VERSION complete." >> $TMPMAIL
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update mailwatch function
#----------------------------------------------------------------#
function update-mailwatch() {
  # Update mailwatch if we have a new version available
  if [[ $MAILWATCHVERSION != "`grep MAILWATCHVERSION /etc/EFA-Config | sed 's/^.*://'`" ]]
    then

      #### Backup Phase #####
      echo -e "Starting installation of new mailwatch version"
      service httpd stop
      service MailScanner stop
      
      mkdir -p /var/EFA/backup/$VERSION/ > /dev/null 2>&1
      mv /var/www/html/mailscanner /var/EFA/backup/$VERSION/ > /dev/null 2>&1
      # mv /usr/lib/MailScanner/MailScanner/CustomFunctions/MailWatch.pm /var/EFA/backup/$VERSION > /dev/null 2>&1
      # mv /usr/lib/MailScanner/MailScanner/CustomFunctions/SQLBlackWhiteList.pm /var/EFA/backup/$VERSION/ > /dev/null 2>&1
      mv /usr/local/bin/mailwatch/tools /var/EFA/backup/$VERSION/ > /dev/null 2>&1

      #### Commit Phase #####
      rm -rf /usr/src/EFA/1.2.0-master
      unzip -d /usr/src/EFA $STAGING/Files/MailWatch-1.2.0-master-GIT-$MAILWATCHVERSION.zip
      cd /usr/src/EFA/1.2.0-master/MailScanner_perl_scripts

      # Issue #66  Grab Passwords from /etc/EFA-Config
      # No change in MailWatch.pm and SQLBlackWhiteList.pm in commit 20f37a1ecb.  Check all files in next update.
      # sed -i "/^my(\$db_user) =/ c\my(\$db_user) = 'mailwatch';" MailWatch.pm
      # sed -i "/^my(\$db_pass) =/ c\my(\$fh);\nmy(\$pw_config) = '/etc/EFA-Config';\nopen(\$fh, \"<\", \$pw_config);\nif(\!\$fh) {\n  MailScanner::Log::WarnLog(\"Unable to open %s to retrieve password\", \$pw_config);\n  return;\n}\nmy(\$db_pass) = grep(/^MAILWATCHSQLPWD/,<\$fh>);\n\$db_pass =~ s/MAILWATCHSQLPWD://;\n\$db_pass =~ s/\\\n//;\nclose(\$fh);" MailWatch.pm
      # sed -i "/^  my(\$db_user) =/ c\  my(\$db_user) = 'mailwatch';" SQLBlackWhiteList.pm
      # sed -i "/^  my(\$db_pass) =/ c\  my(\$fh);\n  my(\$pw_config) = '/etc/EFA-Config';\n  open(\$fh, \"<\", \$pw_config);\n  if(\!\$fh) {\n    MailScanner::Log::WarnLog(\"Unable to open %s to retrieve password\", \$pw_config);\n    return;\n  }\n  my(\$db_pass) = grep(/^MAILWATCHSQLPWD/,<\$fh>);\n  \$db_pass =~ s/MAILWATCHSQLPWD://;\n  \$db_pass =~ s/\\\n//;\n  close(\$fh);" SQLBlackWhiteList.pm
      # mv -f MailWatch.pm /usr/lib/MailScanner/MailScanner/CustomFunctions/
      # mv -f SQLBlackWhiteList.pm /usr/lib/MailScanner/MailScanner/CustomFunctions/
      
      cd /usr/src/EFA/1.2.0-master
      mv tools /usr/local/bin/mailwatch
      rm -f /usr/local/bin/mailwatch/tools/Cron_jobs/INSTALL
      chmod +x /usr/local/bin/mailwatch/tools/Cron_jobs/*
      mv mailscanner /var/www/html
      cd /var/www/html/mailscanner
      chown root:apache images
      chmod ug+rwx images
      chown root:apache images/cache
      chmod ug+rwx images/cache
      chown root:apache temp
      chmod ug+rwx temp
      rm -rf docs

      # Merge conf.php and conf.php.example changes
      cp /var/EFA/backup/$VERSION/mailscanner/conf.php /var/www/html/mailscanner/conf.php

      NONSPAMPRESENT=`grep define\(\'HIDE_NON_SPAM\' /var/www/html/mailscanner/conf.php`
      if [[ -z $NONSPAMPRESENT ]]; then
        sed -i "/^define('HIDE_HIGH_SPAM'/ a\\\n// Hide Non Spam from quarantine reports\ndefine('HIDE_NON_SPAM', false);" /var/www/html/mailscanner/conf.php
      fi

      # Add favicons back
      /bin/cp -f /var/EFA/backup/$VERSION/mailscanner/favicon.ico /var/www/html/mailscanner/
      /bin/cp -f /var/EFA/backup/$VERSION/mailscanner/favicon.ico /var/www/html/mailscanner/images
      /bin/cp -f /var/EFA/backup/$VERSION/mailscanner/favicon.ico /var/www/html/mailscanner/images/favicon.png

      # Add back EFA Branding
      cd /var/www/html/mailscanner/images
      cp /var/EFA/backup/$VERSION/mailscanner/images/EFAlogo-47px.gif .
      cp /var/EFA/backup/$VERSION/mailscanner/images/EFAlogo-79px.png .
      mv mailwatch-logo.png mailwatch-logo.png.orig
      mv mailscannerlogo.gif mailscannerlogo.gif.orig

      # Issue #107 MailWatch login page shows Mailwatch logo and theme after update testing
      sed -i 's/#f7ce4a/#719b94/g' /var/www/html/mailscanner/login.php

      ln -s EFAlogo-79px.png mailwatch-logo.png
      ln -s EFAlogo-47px.gif mailscannerlogo.gif
      ln -s EFAlogo-79px.png MW_LOGO

      # Alter color scheme
      sed -i 's/#F7CE4A/#719b94/g' /var/www/html/mailscanner/style.css

      # Add back Mailgraph link
      cd /var/www/html/mailscanner
      cp other.php other.php.orig
      sed -i "/^    echo '<li><a href=\"geoip_update.php\">/a\    /*Begin EFA*/\n    echo '<li><a href=\"mailgraph.php\">View Mailgraph Statistics</a>';\n    /*End EFA*/" other.php
      cp /var/EFA/backup/$VERSION/mailscanner/mailgraph.php .

      # Reconfigure Greylisting as previously configured
      cp functions.php functions.php.orig
      cp /var/EFA/backup/$VERSION/mailscanner/grey.php .

      # Is greylisting enabled?  Add back menu item...
      if [[ -n "`grep inet:127.0.0.1:2501 /etc/postfix/main.cf`" ]]; then
        sed -i "/^        \$nav\['docs.php'\] = \"Documentation\";/{N;s/$/\n        \/\/Begin EFA\n        if \(\$_SESSION\['user_type'\] == 'A'\) \{\n            \$nav\['grey.php'\] = \"greylist\";\n        \}\n        \/\/End EFA/}" /var/www/html/mailscanner/functions.php
      fi

      # Cleanup
      rm -rf /usr/src/EFA/1.2.0-master

      # Update the version of mailwatch in EFA-Config
      sed -i "/MAILWATCHVERSION:/ c\MAILWATCHVERSION:$MAILWATCHVERSION" /etc/EFA-Config

      # Issue 204 -- UTF8 Characters Not Rendering in MailWatch
      yum -y install php-mbstring

      service httpd start
      service MailScanner start
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update vmtools function
#----------------------------------------------------------------#
function update-vmtools() {
  # Issue #55 reapply open-vm-tools, if present and upgrade if new version is available
  if [[ -f "/usr/local/bin/vmware-toolbox-cmd" ]]; then

    # Remove source compiled version of open-vm-tools
    if [[ -n "`rpm -q open-vm-tools | grep not\ installed`" ]]; then
	  service vmtoolsd stop

      # Cleanup existing open-vm-tools
      rm -f /usr/local/lib/libvmtools*
      rm -f /usr/local/lib/libhgfs*
      rm -f /usr/local/lib/libguestlib*
      rm -rf /usr/local/lib/open-vm-tools
      rm -f /usr/local/bin/vmware*
      rm -f /usr/local/bin/vmtoolsd
      rm -f /usr/local/sbin/mount.vmhgfs
      rm -rf /etc/vmware-tools
      rm -f /usr/local/include/vmci_sockets.h
      rm -rf /usr/local/include/vmGuestLib

      # Install open-vm-tools from EPEL
      yum -y install open-vm-tools
      [[ $? -ne 0 ]] && abort

      sed -i "/VMTOOLSVERSION:/d" /etc/EFA-Config
    else
      yum -y update open-vm-tools
      [[ $? -ne 0 ]] && abort
    fi

    chkconfig vmtoolsd on
    service vmtoolsd start
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to download file
#----------------------------------------------------------------#
function download_update() {
  /usr/bin/wget -O $STAGING/$UPDATE $MIRROR/update/$UPDATE
  [[ $? -ne 0 ]] && abort
  /usr/bin/wget -O $STAGING/$UPDATE.md5 $MIRROR/update/$UPDATE.md5
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to check the MD5
#----------------------------------------------------------------#
function check_md5() {
  # Grab md5 from file
  checksum1=$(cat $STAGING/$UPDATE.md5 | awk '{print $1}')
  # Calculate md5
  checksum2=$(md5sum $STAGING/$UPDATE | awk '{print $1}')
  if [[ "$checksum1" != "$checksum2" ]]; then
    echo "Fatal:  $UPDATE md5 checksum does not match!  Aborting..."
    abort
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Abort Routine
#----------------------------------------------------------------#
function abort() {
  [[ -n $STAGING ]] && rm -rf $STAGING

  echo "" >> $TMPMAIL
  echo "Update to Version $VERSION FAILED.  Updates cancelled." >> $TMPMAIL
  echo "Please visit http://www.efa-project.org for more information." >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL

  echo "Update to Version $VERSION FAILED.  Updates cancelled."
  echo "Please visit http://www.efa-project.org for more information."
  exit 1
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to update system with yum
#----------------------------------------------------------------#
function yum_update() {
  yum -y --exclude="$yumexclude" update
  [[ $? -ne 0 ]] && abort
  # Todo, write some logic that checks any of the yumexclude packages and updates them after testing...
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Finalize
#----------------------------------------------------------------#
function finalize() {
  # Write the latest version number
  echo "EFA-$VERSION" > /etc/EFA-Version
  sed -i "/--- Welcome to EFA-/ c\--- Welcome to EFA-$VERSION ---" /etc/issue

  # Finalize the mail
  echo "" >> $TMPMAIL
  echo "Please visit https://efa-project.org for more information." >> $TMPMAIL
}
#----------------------------------------------------------------#

# +---------------------------------------------------+
# Function to create a random password
# +---------------------------------------------------+
function randompw()
{
  PASSWD=""
  PASSWD=`tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1`
}
# +---------------------------------------------------+

#----------------------------------------------------------------#
# Where to start
#----------------------------------------------------------------#
run_update
finalize
