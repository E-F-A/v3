#!/bin/bash
# +--------------------------------------------------------------------+
# EFA update script
# Version 20140317
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2014  http://www.efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

#----------------------------------------------------------------#
# Variables
#----------------------------------------------------------------#
logdir="/var/log/EFA"
gitdlurl="https://raw.githubusercontent.com/E-F-A/v3"
mirror="http://dl.efa-project.org"
mirrorpath="update"
yumexclude="kernel* mysql* postfix* mailscanner* clamav* clamd*"
ADMINEMAIL="`cat /etc/EFA-Config | grep ADMINEMAIL | sed 's/.*://'`"
MAILFROM="$ADMINEMAIL"
MAILTO="$ADMINEMAIL"
MAILSUBJECT="EFA Update Complete For: `hostname`"
SENDMAIL="/usr/lib/sendmail"
TMPMAIL="/tmp/tempmail"
MAILWATCHVERSION="74f18e2742"
IMAGECEBERUSVERSION="1.1"
PYZORVERSION="0.7.0"
VMTOOLSVERION="9.4.0-1280544"
STAGING="/tmp/EFA-Staging"
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# get-update path
#----------------------------------------------------------------#
function get_update_path() {
  get_cversion
  if [[ $CVERSION == "EFA-3.0.0.0" ]]
    then
      initialize
      yum_update
      update-3.0.0.1
      update-3.0.0.2
      update-3.0.0.3
      update-3.0.0.4
      update-3.0.0.5
      update-software
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.1" ]]
    then
      initialize
      yum_update
      update-3.0.0.2
      update-3.0.0.3
      update-3.0.0.4
      update-3.0.0.5
      update-software
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.2" ]]
    then
      initialize
      yum_update
      update-3.0.0.3
      update-3.0.0.4
      update-3.0.0.5
      update-mailwatch
      update-vmtools
      update-imageceberus
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.3" ]]
    then
      initialize
      yum_update
      update-3.0.0.4
      update-3.0.0.5
      update-software
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.4" ]]
    then
      initialize
      yum_update
      update-3.0.0.5
      update-software
      finalize
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to EFA-3.0.0.5
#----------------------------------------------------------------#
function update-3.0.0.5() {
  
  # Issue #79 EFA-Update Staging and Error Handling 
  
  # Apply 3.0.0.4 update fixes (safe to reapply)
  # See http://forum.efa-project.org/viewtopic.php?f=13&t=604 
  # for more info
  
  ################################################################
  # BEGIN 3.0.0.4 Update Fixes ###################################
  ################################################################
   
  echo "Staring fixes for updates 3.0.0.2-3.0.0.4..."
   
  ##### Staging Phase #####
  
  VERSION="3.0.0.4"
  
  #Issue #18 Email signature sanitation
  /usr/bin/wget --no-check-certificate -O $STAGING/CustomAction.pm $gitdlurl/$VERSION/build/EFA/CustomAction.pm
  [[ $? -ne 0 ]] && abort
  
  #Issue #65 Fix EFA-SA-Update file location
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-SA-Update $gitdlurl/$VERSION/build/EFA/EFA-SA-Update 
  [[ $? -ne 0 ]] && abort
  
  VERSION="3.0.0.3"

  # grab latest version of EFA-Configure
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Configure $gitdlurl/$VERSION/build/EFA/EFA-Configure 
  [[ $? -ne 0 ]] && abort
  
  # Issue #16 System/db/settings backup
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Backup $gitdlurl/$VERSION/build/EFA/EFA-Backup 
  [[ $? -ne 0 ]] && abort
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Backup-cron $gitdlurl/$VERSION/build/EFA/EFA-Backup-cron
  [[ $? -ne 0 ]] && abort

  # Issue #17 Trusted Network Rules
  /usr/bin/wget --no-check-certificate -O $STAGING/denylearned.html $gitdlurl/$VERSION/build/EFA/denylearned.html 
  [[ $? -ne 0 ]] && abort
  /usr/bin/wget --no-check-certificate -O $STAGING/learn-msg.cgi $gitdlurl/$VERSION/build/EFA/learn-msg.cgi
  [[ $? -ne 0 ]] && abort
    
  # Fix vtoolsd init script...
  if [[ -f "/usr/local/bin/vmware-toolbox-cmd" ]]; then
    /usr/bin/wget --no-check-certificate -O $STAGING/vmtoolsd $gitdlurl/$VERSION/build/EFA/vmtoolsd.init 
	[[ $? -ne 0 ]] && abort
  fi
    
  ##### Backup Phase #####
  
  # Skip for this pseudo-update (fix needs committed first...will use in future updates)
  
  ##### Commit Phase #####
  
   # Issue #17 Trusted Network Rules (yum update)
  yum -y install perl-Net-Netmask
  [[ $? -ne 0 ]] && abort
  
  #Issue #18 Email signature sanitation
  rm -f /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm
  mv $STAGING/CustomAction.pm /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm
  EFASQLPWD=`grep EFASQLPWD /etc/EFA-Config | sed 's/^.*://'`
  sed -i "/^  my(\$db_pass) =/ c\  my(\$db_pass) = '$EFASQLPWD';" /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm
  /etc/init.d/MailScanner restart
  
  #Issue #65 Fix EFA-SA-Update file location
  rm -f /etc/cron.daily/EFA-SA-Update
  rm -f /usr/local/sbin/EFA-SA-Update
  mv $STAGING/EFA-SA-Update /usr/local/sbin/EFA-SA-Update
  chmod 755 /usr/local/sbin/EFA-SA-Update
  
  # grab latest version of EFA-Configure
  rm -f /usr/local/sbin/EFA-Configure
  mv $STAGING/EFA-Configure /usr/local/sbin/EFA-Configure
  chmod 700 /usr/local/sbin/EFA-Configure
  
  # Issue #16 System/db/settings backup
  mkdir -p /var/EFA/backup
  mv $STAGING/EFA-Backup /usr/local/sbin/EFA-Backup
  chmod 700 /usr/local/sbin/EFA-Backup
  mv $STAGING/etc/cron.daily/EFA-Backup-cron
  chmod 700 /etc/cron.daily/EFA-Backup-cron
  
  # Issue #60 kam.cf.backup parsed by spamassassin
  mkdir -p /var/EFA/backup/KAM
  
  # Issue #17 Trusted Network Rules
  touch /etc/sysconfig/EFA_trusted_networks
  yum -y install perl-Net-Netmask
  rm -f /var/www/html/denylearned.html
  mv $STAGING/denylearned.html /var/www/html/denylearned.html
  rm -f /var/www/cgi-bin/learn-msg.cgi
  mv $STAGING/learn-msg.cgi /var/www/cgi-bin/learn-msg.cgi
  chmod 755 /var/www/cgi-bin/learn-msg.cgi
  EFASQLPWD=`grep EFASQLPWD /etc/EFA-Config | sed 's/^.*://'`
  sed -i "/^\$db_pass =/ c\$db_pass = \"$EFASQLPWD\";" /var/www/cgi-bin/learn-msg.cgi 
  
  # Fix vtoolsd init script...
  if [[ -f "/usr/local/bin/vmware-toolbox-cmd" ]]; then
    rm -f /etc/init.d/vmtoolsd
    mv $STAGING/vmtoolsd /etc/init.d/vmtoolsd
  fi
  
  ################################################################
  # END 3.0.0.4 Update Fixes #####################################
  ################################################################
  
  echo "Staring update to E.F.A. 3.0.0.5"
  VERSION="3.0.0.5"
  
  ##### Staging Phase #####
  
  # grab latest version of EFA-Configure with libraries
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Configure $gitdlurl/$VERSION/build/EFA/EFA-Configure
  [[ $? -ne 0 ]] && abort
  wget --no-check-certificate -O $STAGING/libraries-filelist.txt $gitdlurl/$VERSION/build/EFA/lib-EFA-Configure/libraries-filelist.txt
  [[ $? -ne 0 ]] && abort
  mkdir -p $STAGING/lib   
  for lib in `cat $STAGING/libraries-filelist.txt`
    do
      /usr/bin/wget --no-check-certificate -O $STAGING/lib/$lib $gitdlurl/$VERSION/build/EFA/lib-EFA-Configure/$lib
	  [[ $? -ne 0 ]] && abort
  done
  
  # Issue #87 EFA-Tokens Cron Syntax Wrong 
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Tokens-Cron $gitdlurl/$VERSION/build/EFA/EFA-Tokens-Cron
  [[ $? -ne 0 ]] && abort
  
  # Issue #100 phishing site urls
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-MS-Update $gitdlurl/$VERSION/build/EFA/EFA-MS-Update
  [[ $? -ne 0 ]] && abort
 
  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Daily-cron $gitdlurl/$VERSION/build/EFA/EFA-Daily-cron
  [[ $? -ne 0 ]] && abort 

  /usr/bin/wget --no-check-certificate -O $STAGING/EFA-Monthly-cron $gitdlurl/$VERSION/build/EFA/EFA-Monthly-cron
  [[ $? -ne 0 ]] && abort 
  
  # Issue #77 -- EFA MailScanner 0 byte tmp files
  wget --no-check-certificate -O $STAGING/mailscanner-4.84.6-1.patch $gitdlurl/EFA/mailscanner-4.84.6-1.patch
  [[ $? -ne 0 ]] && abort 

  ##### Backup Phase #####
  
  /usr/local/sbin/EFA-Backup -backup >> /var/log/EFA/EFA-Backup.log 2>&1
  
  # Archive files we replace or remove
  # Note: maybe add all efa specific files to the backup tool?
  BACKUPDIR="/var/EFA/backup/3.0.0.5"
  mkdir $BACKUPDIR
  chmod 700 $BACKUPDIR
  cp /etc/cron.daily/EFA-Tokens-Cron $BACKUPDIR
  cp /etc/cron.daily/EFA-Daily-cron $BACKUPDIR
  cp /etc/cron.monthly/EFA-Monthly-cron $BACKUPDIR
  cp /usr/local/sbin/EFA-Configure $BACKUPDIR
  cp -r /var/EFA/lib/EFA-Configure/ $BACKUPDIR/EFA-Configure-libs/
  
  cp /etc/cron.daily/update_phishing_sites $BACKUPDIR
  cp /etc/cron.d/raid-check $BACKUPDIR
  ##### Commit Phase #####
  
  # Create backup directory
  mkdir -p /var/EFA/backup/$VERSION
  
  #Issue #70 .bashrc EFA-Configure Launch Interactive Only
  LOCALUSER=`grep :501: /etc/passwd | sed 's/:x.*$//'`
  sed -i "/^sudo \/usr\/local\/sbin\/EFA-Configure/ c\if ! [ -z \"\$PS1\" ]; then\n  sudo \/usr\/local\/sbin\/EFA-Configure\nfi" /home/$LOCALUSER/.bashrc
  
  # Issue #76 Processing Attempts Database Bug
  sed -i "/^Maximum Processing Attempts =/ c\Maximum Processing Attempts = 0" /etc/MailScanner/MailScanner.conf
  
  # Issue #98 postfix tlsmgr smtpd_tls_session warnings
  postconf -e "smtpd_tls_session_cache_database = btree:/var/lib/postfix/smtpd_tls_session_cache"
  postconf -e "smtp_tls_session_cache_database = btree:/var/lib/postfix/smtp_tls_session_cache"
  service postfix reload
  
  # Issue #87 EFA-Tokens Cron Syntax Wrong 
  rm -f /etc/cron.daily/EFA-Tokens-Cron
  mv $STAGING/EFA-Tokens-Cron /etc/cron.daily/EFA-Tokens-Cron
  chmod 755 /etc/cron.daily/EFA-Tokens-Cron
    
  # grab latest version of EFA-Configure with libraries
  rm -f /usr/local/sbin/EFA-Configure
  rm -f /var/EFA/lib/EFA-Configure/*
  mv $STAGING/EFA-Configure /usr/local/sbin/EFA-Configure
  mkdir -p /var/EFA/lib/EFA-Configure
  mv $STAGING/lib/* /var/EFA/lib/EFA-Configure/  
  chmod 700 /usr/local/sbin/EFA-Configure
  chmod 600 /var/EFA/lib/EFA-Configure/*

  # Issue #100 phishing site urls
  mv -f $STAGING/EFA-MS-Update /usr/local/sbin/EFA-MS-Update
  mv -f $STAGING/EFA-Daily-cron /etc/cron.daily/EFA-Daily-cron 
  mv -f $STAGING/EFA-Monthly-cron /etc/cron.monthly/EFA-Monthly-cron 
  chmod 700 /usr/local/sbin/EFA-MS-Update
  chmod 700 /etc/cron.daily/EFA-Daily-cron
  chmod 700 /etc/cron.monthly/EFA-Monthly-cron
  rm -f /etc/cron.daily/update_phishing_sites
  
  # Issue #102 Remove cron.d/raid-check
  rm -f /etc/cron.d/raid-check
  
  # Issue #93 Pyzor Errors
  ln -s /var/spool/postfix/.pyzor /var/www/.pyzor
  chown -R postfix:apache /var/spool/postfix/.pyzor
  chmod -R ug+rwx /var/spool/postfix/.pyzor
  
  # Issue #89 Razor Errors
  ln -s /var/spool/postfix/.pyzor /var/www/.razor
  chown -R postfix:apache /var/spool/postfix/.razor
  chmod -R ug+rwx /var/spool/postfix/.razor
  
  # Issue #77 -- EFA MailScanner 0 byte tmp files
  cd /usr/lib/MailScanner
  patch < $STAGING/mailscanner-4.84.6-1.patch
 
  # Add a mailwatch version to EFA-Config (the previous version)
  echo "MAILWATCHVERSION:8e1a202895" >> /etc/EFA-Config
  
  # Add a ImageCeberus version to EFA-Config (the previous version)
  echo "IMAGECEBERUSVERSION:1.0" >> /etc/EFA-Config
  
  # Add a Pyzor version to EFA-Config (the previous version)
  echo "PYZORVERSION:0.5.0" >> /etc/EFA-Config
  
  echo "Update to $VERSION complete." 
  echo ""
  echo "" >> $TMPMAIL
  echo "Update to $VERSION complete." >> $TMPMAIL
}
#----------------------------------------------------------------#
  
#----------------------------------------------------------------#
# Update to EFA-3.0.0.4
#----------------------------------------------------------------#
function update-3.0.0.4() {

  echo "Staring update to E.F.A. 3.0.0.4"
  VERSION="3.0.0.4"
  # Create backup directory
  mkdir -p /var/EFA/backup/$VERSION
  
  #Issue #63 Remove old kam.cf.backup from Spamassassin directory
  rm -f /etc/mail/spamassassin/kam.cf.backup

  #Issue #18 Email signature sanitation
  rm -f /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm
  /usr/bin/wget --no-check-certificate -O /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm $gitdlurl/$VERSION/build/EFA/CustomAction.pm
  EFASQLPWD=`grep EFASQLPWD /etc/EFA-Config | sed 's/^.*://'`
  sed -i "/^  my(\$db_pass) =/ c\  my(\$db_pass) = '$EFASQLPWD';" /usr/lib/MailScanner/MailScanner/CustomFunctions/CustomAction.pm
  /etc/init.d/MailScanner restart
  
  #Issue #65 Fix EFA-SA-Update file location
  rm -f /etc/cron.daily/EFA-SA-Update
  rm -f /usr/local/sbin/EFA-SA-Update
  /usr/bin/wget --no-check-certificate -O /usr/local/sbin/EFA-SA-Update $gitdlurl/$VERSION/build/EFA/EFA-SA-Update
  chmod 755 /usr/local/sbin/EFA-SA-Update

  echo "Update to $VERSION complete." 
  echo ""
  echo "" >> $TMPMAIL
  echo "Update to $VERSION complete." >> $TMPMAIL
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to EFA-3.0.0.3
#----------------------------------------------------------------#
function update-3.0.0.3() {

  echo "Staring update to E.F.A. 3.0.0.3"
  VERSION="3.0.0.3"
  mkdir -p /var/EFA/backup/$VERSION
  # Kernel update check
  # If the kernel has updated in a previous update, and
  # the system has not rebooted, do not proceed until running
  # on latest kernel
  CURRENTKERNEL="`uname -r`"
  LATESTKERNEL="`grep -m 1 CentOS /boot/grub/menu.lst | sed 's/.*(//' | sed 's/)//'`"
  if [[ $CURRENTKERNEL != $LATESTKERNEL ]]; then 
    echo "Your system has an updated kernel, but you are not running"
    echo "on the latest kernel.  Please restart your system and run"
    echo "EFA-Update after restart." 

    echo "From: $MAILFROM" > $TMPMAIL
    echo "To: $MAILTO" >> $TMPMAIL
    echo "Reply-To: $MAILFROM" >> $TMPMAIL
    echo "Subject: Restart needed to update to 3.0.0.3 " >> $TMPMAIL
    echo "" >> $TMPMAIL
    echo "Update to 3.0.0.3 is pending." >> $TMPMAIL
    echo "Your system has an updated kernel, but you are not running" >> $TMPMAIL
    echo "on the latest kernel.  Please restart your system and run" >> $TMPMAIL
    echo "EFA-Update after restart." >> $TMPMAIL
    cat $TMPMAIL | $SENDMAIL -t
    rm $TMPMAIL
    exit 1
  fi

  # Issue #62 install perl-Compress-Raw-Zlib
  yum -y install perl-Compress-Raw-Zlib

  # Create /var/EFA/lib
  mkdir /var/EFA/lib
  mkdir /var/EFA/lib/EFA-Configure
  
  # grab latest version of EFA-Configure
  rm -f /usr/local/sbin/EFA-Configure
  /usr/bin/wget --no-check-certificate -O /usr/local/sbin/EFA-Configure $gitdlurl/$VERSION/build/EFA/EFA-Configure
  chmod 700 /usr/local/sbin/EFA-Configure

  # Issue #16 System/db/settings backup
  mkdir -p /var/EFA/backup
  /usr/bin/wget --no-check-certificate -O /usr/local/sbin/EFA-Backup $gitdlurl/$VERSION/build/EFA/EFA-Backup
  chmod 700 /usr/local/sbin/EFA-Backup
  /usr/bin/wget --no-check-certificate -O /etc/cron.daily/EFA-Backup-cron $gitdlurl/$VERSION/build/EFA/EFA-Backup-cron
  chmod 700 /etc/cron.daily/EFA-Backup-cron

  # Issue #60 kam.cf.backup parsed by spamassassin
  mkdir -p /var/EFA/backup/KAM
  rm -f /etc/cron.daily/EFA-SA-Update
  /usr/bin/wget --no-check-certificate -O /etc/cron.daily/EFA-SA-Update $gitdlurl/$VERSION/build/EFA/EFA-SA-Update
  chmod 755 /etc/cron.daily/EFA-SA-Update

  # Issue #17 Trusted Network Rules
  touch /etc/sysconfig/EFA_trusted_networks
  yum -y install perl-Net-Netmask
  /usr/bin/wget --no-check-certificate -O /var/www/html/denylearned.html $gitdlurl/$VERSION/build/EFA/denylearned.html
  rm -f /var/www/cgi-bin/learn-msg.cgi
  /usr/bin/wget --no-check-certificate -O /var/www/cgi-bin/learn-msg.cgi $gitdlurl/$VERSION/build/EFA/learn-msg.cgi
  chmod 755 /var/www/cgi-bin/learn-msg.cgi
  EFASQLPWD=`grep EFASQLPWD /etc/EFA-Config | sed 's/^.*://'`
  sed -i "/^\$db_pass =/ c\$db_pass = \"$EFASQLPWD\";" /var/www/cgi-bin/learn-msg.cgi
  
  #  Issue #50, clean sqlgrey source files
  rm -rf /etc/cron.weekly/sqlgrey-1.8.0*

  #  Issue #53, fix postfix queues after yum update
  chown postfix:apache /var/spool/postfix/incoming
  chown postfix:apache /var/spool/postfix/hold
  chmod 740 /var/spool/postfix/incoming
  chmod 740 /var/spool/postfix/hold

  # Skipping Mailwatch upgrade in this version, handled by function from now on.
  # This prevents multiple upgrades in a single update batch (3.0.0.1 -> 3.0.0.5)
  # saving time.
  # As users should not upgrade to an specific version but always use the latest
  # E.F.A. version this should not cause any issues.

  # Add the following in one pass for MailWatch to ensure settings are present  
  echo "" >> /var/www/html/mailscanner/conf.php
  echo "// Enable MailScanner Rule Editor" >> /var/www/html/mailscanner/conf.php
  echo "// Initially disabled as other config needs to be done to use it" >> /var/www/html/mailscanner/conf.php
  echo "define('MSRE', false);" >> /var/www/html/mailscanner/conf.php
  echo "define('MSRE_RELOAD_INTERVAL', 5);" >> /var/www/html/mailscanner/conf.php
  echo "define('MSRE_RULESET_DIR', \"/etc/MailScanner/rules\");" >> /var/www/html/mailscanner/conf.php


  # Update vmtools move to function so it is only run once just like mailwatch

  # Issue #30 filter non-spam from quarantine reports
  sed -i "/^ ((to_address=%s) OR (to_domain=%s))$/ a\AND\n a.isspam>0" /usr/local/bin/mailwatch/tools/Cron_jobs/quarantine_report.php

  # Cleanup
  cd /
  rm -rf /usr/src/EFA/*

  # Show info to user and populate the e-mail content
  echo "Update to $VERSION complete." 
  echo ""
  echo "Please note the following."
  echo ""
  echo "MailWatch has been updated. If you have custom tweaks,"
  echo "please restore those tweaks in the new MailWatch."
  echo "Look in /var/EFA/backup/3.0.0.2 for backed up files."
  echo ""
  echo "The kernel has likely updated."
  echo "If you are using vmware-tools (commercial version)"
  echo "please restart your E.F.A. and install the latest version"
  
  echo "" >> $TMPMAIL
  echo "Update to $VERSION complete." >> $TMPMAIL
  echo "" >> $TMPMAIL
  echo "Please note the following." >> $TMPMAIL
  echo "" >> $TMPMAIL
  echo "MailWatch has been updated. If you have custom tweaks," >> $TMPMAIL
  echo "please restore those tweaks in the new MailWatch." >> $TMPMAIL
  echo "Look in /var/EFA/backup/3.0.0.2 for backed up files." >> $TMPMAIL
  echo "" >> $TMPMAIL
  echo "The kernel has likely updated." >> $TMPMAIL
  echo "If you are using vmware-tools (commercial version)" >> $TMPMAIL
  echo "please restart your E.F.A. and install the latest version" >> $TMPMAIL
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to EFA-3.0.0.2 
#----------------------------------------------------------------#
function update-3.0.0.2() {

  echo "Staring update to E.F.A. 3.0.0.2"
  VERSION="3.0.0.2"
  # Create backup directory
  mkdir -p /var/EFA/backup/$VERSION
  
  # fix issue Urgent: learn-msg.cgi broken #44
  EFASQLPWD=`grep EFASQLPWD /etc/EFA-Config | sed 's/^.*://'`
  sed -i "/^\$db_pass =/ c\$db_pass = \"$EFASQLPWD\";" /var/www/cgi-bin/learn-msg.cgi 
  
  echo "Update to $VERSION complete." 
  echo ""
  echo "" >> $TMPMAIL
  echo "Update to $VERSION complete." >> $TMPMAIL
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to EFA-3.0.0.1 
#----------------------------------------------------------------#
function update-3.0.0.1() {

  echo "Staring update to E.F.A. 3.0.0.1"
  VERSION="3.0.0.1"
  # Create backup directory
  mkdir -p /var/EFA/backup/$VERSION
  
  # grab latest version of EFA-Configure
  rm -f /usr/local/sbin/EFA-Configure
  /usr/bin/wget --no-check-certificate -O /usr/local/sbin/EFA-Configure $gitdlurl/$VERSION/build/EFA/EFA-Configure
  chmod 700 /usr/local/sbin/EFA-Configure
  
  # fix issue 32 clean quarantine not enabled
  sed -i '/$disabled = 1;/ c\$disabled = 0;' /etc/cron.daily/clean.quarantine

  # fix issue 23 
  yum -y remove cyrus-sasl-sql cyrus-sasl-ldap

  # fix issue 24 Disable Deliver Cleaned Messages
  sed -i '/^Deliver Cleaned Messages =/ c\Deliver Cleaned Messages = No' /etc/MailScanner/MailScanner.conf
  
  # Download latest learn-msg.cgi (fix issue 41)
  rm -f /var/www/cgi-bin/learn-msg.cgi
  cd /var/www/cgi-bin
  wget --no-check-certificate $gitdlurl/$VERSION/build/EFA/learn-msg.cgi
  chmod 755 learn-msg.cgi
  
  echo "Update to $VERSION complete." 
  echo ""
  echo "" >> $TMPMAIL
  echo "Update to $VERSION complete." >> $TMPMAIL
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update vmtools function
#----------------------------------------------------------------#
function update-vmtools() {
  # Issue #55 reapply open-vm-tools, if present and upgrade if new version is available
  
  # Check:  Will this potentially remove commercial vmware-tools?
  # If so, how do we test for open versus commercial versions?
  
  # Todo:  Version checking for open-vm-tools and flag if installed
  
  if [[ -f "/usr/local/bin/vmware-toolbox-cmd" ]]; then
    #### Staging Phase ####
	/usr/bin/wget --no-check-certificate -O $STAGING/open-vm-tools-$VMTOOLSVERION.tar.gz $mirror/build/$VERSION/open-vm-tools-$VMTOOLSVERION.tar.gz
	[[ $? -ne 0 ]] && abort
	
	/usr/bin/wget --no-check-certificate -O $STAGING/vmtoolsd.init $gitdlurl/$VERSION/build/EFA/vmtoolsd.init
	[[ $? -ne 0 ]] && abort
	
	#### Backup Phase #####
	# Nothing to do
	
	#### Commit Phase #####
	service vmtoolsd stop
    
    # Cleanup existing open-vm-tools 
    rm -f /etc/init.d/vmtoolsd
    rm -f /usr/local/lib/libvmtools*
    rm -f /usr/local/lib/libhgfs*
    rm -f /usr/local/lib/libguestlib*
    rm -rf /usr/local/lib/open-vm-tools
    rm -f /usr/local/bin/vmware*
    rm -f /usr/local/bin/vmtoolsd
    rm -f /usr/local/sbin/mount.vmhgfs
    rm -rf /etc/vmware-tools
    rm -f /usr/local/include/vmci_sockets.h
    rm -rf /usr/local/include/vmGuestLib

    cd /usr/src/EFA
    tar xvzf $STAGING/open-vm-tools-$VMTOOLSVERION.tar.gz -C /usr/src/EFA
    cd open-vm-tools-$VMTOOLSVERION
    ./configure --without-x
    make
    make install
    
    rm -f /etc/init.d/vmtoolsd.init	
	mv $STAGING/vmtoolsd.init /etc/init.d/vmtoolsd.init
    chmod 755 /etc/init.d/vmtoolsd
    # lib adjustment
    ln -s /usr/lib64/libdnet.so.1 /usr/lib64/libdnet.1 > /dev/null 2>&1
    chkconfig vmtoolsd on
    service vmtoolsd start
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update Pyzor function 
#----------------------------------------------------------------#
function update-pyzor() {
  # Update Pyzor if we have a new version available
  if [[ ! $PYZORVERSION == "`grep PYZORVERSION /etc/EFA-Config | sed 's/^.*://'`" ]]
    then
      #### Staging Phase ####
      /usr/bin/wget --no-check-certificate -O $STAGING/pyzor-$PYZORVERSION.tar.gz $mirror/build/$VERSION/pyzor-$PYZORVERSION.tar.gz
      [[ $? -ne 0 ]] && abort
      
      #### Backup Phase ####
      mv /var/spool/postfix/.pyzor/servers /var/EFA/backup/$VERSION/
      
      #### Commit Phase #####
      echo -e "Starting installation of new Pyzor version"  

      yum -y install python-setuptools
      
      cd $STAGING
      tar xvzf pyzor-$PYZORVERSION.tar.gz
      cd pyzor-$PYZORVERSION
      python setup.py build
      python setup.py install

      # Fix deprecation warning message
      sed -i '/^#!\/usr\/bin\/python/ c\#!\/usr\/bin\/python -Wignore::DeprecationWarning' /usr/bin/pyzor

      mkdir /var/spool/postfix/.pyzor
      ln -s /var/spool/postfix/.pyzor /var/www/.pyzor
      chown -R postfix:apache /var/spool/postfix/.pyzor
      chmod -R ug+rwx /var/spool/postfix/.pyzor    
      
      # and finally initialize the servers file with an discover.
      su postfix -s /bin/bash -c 'pyzor discover'
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update ImageCeberus function 
#----------------------------------------------------------------#
function update-imageceberus() {
  # Update ImageCeberus if we have a new version available
  if [[ ! $IMAGECEBERUSVERSION == "`grep IMAGECEBERUSVERSION /etc/EFA-Config | sed 's/^.*://'`" ]]
    then
      #### Staging Phase ####
      /usr/bin/wget --no-check-certificate -O $STAGING/imageCerberus-v$IMAGECEBERUSVERSION.zip $mirror/build/$VERSION/imageCerberus-v$IMAGECEBERUSVERSION.zip
      [[ $? -ne 0 ]] && abort
      
      #### Backup Phase ####
      mv /etc/spamassassin/imageCerberus /var/EFA/backup/$VERSION/
      mv /usr/local/share/perl5/Mail/SpamAssassin/Plugin/ImageCerberusPLG.pm /var/EFA/backup/$VERSION/
      mv /etc/mail/spamassassin/ImageCerberusPLG.cf /var/EFA/backup/$VERSION/
      
      #### Commit Phase #####
      echo -e "Starting installation of new ImageCeberus version"  
      service MailScanner stop  
      
      cd $STAGING
      unzip imageCerberus-v$IMAGECEBERUSVERSION.zip
      cd imageCerberus-v$IMAGECEBERUSVERSION
      mv spamassassin/imageCerberus /etc/spamassassin/
      rm -f /etc/spamassassin/imageCerberus/imageCerberusEXE
      mv /etc/spamassassin/imageCerberus/x86_64/imageCerberusEXE /etc/spamassassin/imageCerberus/
      rm -rf /etc/spamassassin/imageCerberus/x86_64
      rm -rf /etc/spamassassin/imageCerberus/i386
 
      mv spamassassin/ImageCerberusPLG.pm /usr/local/share/perl5/Mail/SpamAssassin/Plugin/
      mv spamassassin/ImageCerberusPLG.cf /etc/mail/spamassassin/
      
      sed -i '/^loadplugin ImageCerberusPLG / c\loadplugin ImageCerberusPLG /usr/local/share/perl5/Mail/SpamAssassin/Plugin/ImageCerberusPLG.pm' /etc/mail/spamassassin/ImageCerberusPLG.cf

      # Issue 67 default ImageCeberus score
      sed -i "/^score     ImageCerberusPLG0/ c\score     ImageCerberusPLG0     0.0  0.0  0.0  0.0" /etc/mail/spamassassin/ImageCerberusPLG.cf
      
      service MailScanner start
  fi
}
#----------------------------------------------------------------#    	    

#----------------------------------------------------------------#
# Update mailwatch function 
#----------------------------------------------------------------#
function update-mailwatch() {
  # Update mailwatch if we have a new version available
  if [[ ! $MAILWATCHVERSION == "`grep MAILWATCHVERSION /etc/EFA-Config | sed 's/^.*://'`" ]]
    then
      #### Staging Phase ####
      /usr/bin/wget --no-check-certificate -O $STAGING/MailWatch-1.2.0-master-GIT-$MAILWATCHVERSION.zip $mirror/build/$VERSION/MailWatch-1.2.0-master-GIT-$MAILWATCHVERSION.zip
      [[ $? -ne 0 ]] && abort
	  
      #### Backup Phase #####
      mv /var/www/html/mailscanner /var/EFA/backup/$VERSION/
      mv /usr/lib/MailScanner/MailScanner/CustomFunctions/MailWatch.pm /var/EFA/backup/$VERSION
      mv /usr/local/bin/mailwatch/tools /var/EFA/backup/$VERSION/
	  	  
      #### Commit Phase #####
      echo -e "Starting installation of new mailwatch version"  
      service httpd stop
      service MailScanner stop     

      unzip -d /usr/src/EFA $STAGING/MailWatch-1.2.0-master-GIT-$MAILWATCHVERSION.zip
      cd /usr/src/EFA/1.2.0-master/MailScanner_perl_scripts
      
      # Todo:  Grab Passwords from /etc/EFA-Config here
      MAILWATCHSQLPWD=`grep MAILWATCHSQLPWD /etc/EFA-Config | sed 's/^.*://'`
      sed -i "/^my(\$db_user) =/ c\my(\$db_user) = 'mailwatch';" MailWatch.pm
      sed -i "/^my(\$db_pass) =/ c\my(\$db_pass) = '$MAILWATCHSQLPWD';" MailWatch.pm

      mv -f MailWatch.pm /usr/lib/MailScanner/MailScanner/CustomFunctions/
      cd /usr/src/EFA/1.2.0-master
      mv tools /usr/local/bin/mailwatch
      rm -f /usr/local/bin/mailwatch/tools/Cron_jobs/INSTALL
      chmod +x /usr/local/bin/mailwatch/tools/Cron_jobs/*
      mv mailscanner /var/www/html
      # MSRE support in this snapshot, but it is not ready, skipping 
      cd /var/www/html/mailscanner
      chown root:apache images
      chmod ug+rwx images
      chown root:apache images/cache
      chmod ug+rwx images/cache
      chown root:apache temp
      chmod ug+rwx temp
      rm -rf docs
  
      # Build new conf.php
      cp /var/EFA/backup/$VERSION/mailscanner/conf.php /var/www/html/mailscanner

      # Add favicons back
      /bin/cp -f /var/EFA/backup/$VERSION/mailscanner/favicon.ico /var/www/html/mailscanner/
      /bin/cp -f /var/EFA/backup/$VERSION/mailscanner/favicon.ico /var/www/html/mailscanner/images
      /bin/cp -f /var/EFA/backup/$VERSION/mailscanner/favicon.ico /var/www/html/mailscanner/images/favicon.png

      # Add back EFA Branding
      cd /var/www/html/mailscanner/images
      cp /var/EFA/backup/$VERSION/mailscanner/images/EFAlogo-47px.gif .
      cp /var/EFA/backup/$VERSION/mailscanner/images/EFAlogo-79px.png .
      mv mailwatch-logo.gif mailwatch-logo.gif.orig >/dev/null 2>&1
      mv mailwatch-logo.png mailwatch-logo.png.orig
      mv mailscannerlogo.gif mailscannerlogo.gif.orig
      ln -s EFAlogo-79px.png mailwatch-logo.gif
      ln -s EFAlogo-79px.png mailwatch-logo.png
      ln -s EFAlogo-47px.gif mailscannerlogo.gif
  
      # Alter color scheme
      sed -i 's/#F7CE4A/#719b94/g' /var/www/html/mailscanner/style.css

      # Add back Mailgraph link
      cd /var/www/html/mailscanner
      cp other.php other.php.orig
      sed -i "/^    echo '<li><a href=\"geoip_update.php\">/a\    /*Begin EFA*/\n    echo '<li><a href=\"mailgraph.php\">View Mailgraph Statistics</a>';\n    /*End EFA*/" other.php
      cp /var/EFA/backup/$VERSION/mailscanner/mailgraph.php .  

      # Issue #61 Domain Administrator cannot delete domain only whitelist/blacklist
      sed -i '/^    \$to_domain = \$split\[2\];/{N;s/$/\nelse \{ \$to_domain = \$url_to; \}/}' /var/www/html/mailscanner/lists.php
  
      # Reconfigure Greylisting as previously configured
      cp functions.php functions.php.orig
      cp /var/EFA/backup/$VERSION/mailscanner/grey.php .
  
      # Is greylisting enabled?  Add back menu item...
      if [[ -n "`grep inet:127.0.0.1:2501 /etc/postfix/main.cf`" ]]; then
        sed -i "/^            \$nav\['docs.php'\] = \"Documentation\";/{N;s/$/\n        \/\/Begin EFA\n        if \(\$_SESSION\['user_type'\] == 'A'\) \{\n            \$nav\['grey.php'\] = \"greylist\";\n        \}\n        \/\/End EFA/}" /var/www/html/mailscanner/functions.php
      fi 

      # if updating from below version '3.0.0.5' update the config file
      if [[ $CVERSION == "EFA-3.0.0.0" || $CVERSION == "EFA-3.0.0.1" || $CVERSION == "EFA-3.0.0.2" || $CVERSION == "EFA-3.0.0.3" || $CVERSION == "EFA-3.0.0.4" ]]
        then
          # Add the new software version disable function.
          echo "" >> /var/www/html/mailscanner/conf.php
          echo "// Show Software Version tab (only Admins can see it)" >> /var/www/html/mailscanner/conf.php
          echo "define('SHOW_SFVERSION', false);" >> /var/www/html/mailscanner/conf.php
          echo "" >> /var/www/html/mailscanner/conf.php
          
          # Re-ad the virus_info function          
          sed -i "/^\/\/ define('VIRUS_INFO', \"http:\/\/www.rainingfrogs.co.uk/ c\define('VIRUS_INFO', \"http://www.securelist.com/en/descriptions?words=%s&behavior=&amp;Search=Search&amp;search_type=1\");" /var/www/html/mailscanner/conf.php

          # Delete the FPDF_FONTPATH setting
          sed -i "/FPDF_FONTPATH/d" /var/www/html/mailscanner/conf.php
  
      fi
          
      # Update the version of mailwatch in EFA-Config
      sed -i "/MAILWATCHVERSION:/ c\MAILWATCHVERSION:$MAILWATCHVERSION" /etc/EFA-Config
      
      service httpd start
      service MailScanner start
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# initialize
#----------------------------------------------------------------#
function initialize() {
  # Start the TMPmail file
  echo "From: $MAILFROM" > $TMPMAIL
  echo "To: $MAILTO" >> $TMPMAIL
  echo "Reply-To: $MAILFROM" >> $TMPMAIL
  echo "Subject: $MAILSUBJECT" >> $TMPMAIL
  echo "" >> $TMPMAIL
  
  mkdir -p $STAGING
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Abort Routine
#----------------------------------------------------------------#
function abort() {
  rm -rf $STAGING
  
  echo "" >> $TMPMAIL
  echo "Update to Version $VERSION FAILED.  Updates cancelled." >> $TMPMAIL
  echo "Please visit http://www.efa-project.org for more information." >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL
  
  echo "Update to Version $VERSION FAILED.  Updates cancelled."
  echo "Please visit http://www.efa-project.org for more information." 
  exit 1
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update all software packages
#----------------------------------------------------------------#
function update-software() {
  update-mailwatch
  update-vmtools
  update-imageceberus
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Finalize
#----------------------------------------------------------------#
function finalize() {
  rm -rf $STAGING

  # Write the latest version number
  echo "EFA-$VERSION" > /etc/EFA-Version
  sed -i "/--- Welcome to EFA-/ c\--- Welcome to EFA-$VERSION ---" /etc/issue 
  
  # Finalize the mail and send it out
  echo "" >> $TMPMAIL
  echo "Please visit http://www.efa-project.org for more information." >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL
  
  echo "All done"
  exit 0
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to update system with yum
#----------------------------------------------------------------#
function yum_update() {
  yum -y --exclude="$yumexclude" update
  # Todo, write some logic that checks any of the yumexclude packages and updates them after testing...
  
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function get current version number
#----------------------------------------------------------------#
function get_cversion() {
  if [ -f /etc/EFA-Version ]
    then
      CVERSION="`head -1 /etc/EFA-Version`" 
    else
      echo "ERROR: No valid version file found on this system." 
      echo "ERROR: exiting now"
      exit 0
  fi
  
  # Check if we run an beta version
  if [[ $CVERSION =~ ^EFA\-[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}-beta$ ]]
    then
      echo "ERROR: You seem to be running an beta version, no upgrade possible."
      echo "ERROR: please look at http://www.efa-project.org for more information."
      echo "ERROR: exiting now"
      exit 0
  fi
  
  # Check if CVERSION is an valid Version file
  if ! [[ $CVERSION =~ ^EFA\-[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}$ ]]
    then
      echo "ERROR: The version file on your system does not seem to be valid."
      echo "ERROR: exiting now"
      exit 0
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Check if we are root
#----------------------------------------------------------------#
function user_check() {
  if [ `whoami` == root ]
    then
      echo "[EFA] Good you are root"
  else
    echo "[EFA] Please become root to run this update"
    exit 0
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Where to start
#----------------------------------------------------------------#
user_check
get_update_path