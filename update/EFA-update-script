#!/bin/bash
# +--------------------------------------------------------------------+
# EFA update script
# Version 20150426
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2015 http://www.efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

#----------------------------------------------------------------#
# Variables
#----------------------------------------------------------------#
logdir="/var/log/EFA"
gitdlurl="https://raw.githubusercontent.com/E-F-A/v3"
MIRROR="http://dl.efa-project.org"
mirrorpath="update"
yumexclude="kernel* mysql* postfix* mailscanner* clamav* clamd*"
ADMINEMAIL="`cat /etc/EFA-Config | grep ADMINEMAIL | sed 's/.*://'`"
MAILFROM="$ADMINEMAIL"
MAILTO="$ADMINEMAIL"
MAILSUBJECT="EFA Update Complete For: `hostname`"
SENDMAIL="/usr/lib/sendmail"
TMPMAIL="/tmp/tempmail"
STAGING="/tmp/EFA-Staging"
#----------------------------------------------------------------#


#----------------------------------------------------------------#
# test setup:
# EFA update scripts fetches .tar.gz file from dl.efa-project.org
# tar.gz file contains all files needed to update (previous from git and dl.efa-project.org)
# tar.gz file structure and naming:
# EFA-Update-<previous version>-<new version>.tar.gz:
#   EFA-Update-3.0.0.7-3.0.0.8.tar.gz
#      /EFA-Version-Upgrade   				<- script that should be launched from this file.
#		   /Files/										    <- Directory containing binary files
#      /Scripts/									    <- Directory containing update scripts (previous git scripts)
#
# Update methode:
# this script downloads the latest EFA-Update.XXXX-XXXX.tar.gz file
# this script runs MD5 checksum for the tar.gz. file
# this script unpacks the tar.gz file to /tmp/EFA-Staging
# this script runs the EFA-Version-Upgrade script
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# get-update path
#----------------------------------------------------------------#
function get_update_path() {
  get_cversion
  if [[ $CVERSION == "EFA-3.0.0.0" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.1" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.2" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.3" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.4" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.5" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.6" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.7" ]]
    then
      initialize
      update-3.0.0.8
      finalize
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.0.7 on the 'old way'
#----------------------------------------------------------------#
function update-3.0.0.7() {
  cd $STAGING
  wget -q $MIRROR/update/versions/EFA-Version-Upgrade-3.0.0.7
  chmod 700 EFA-Version-Upgrade-3.0.0.7
  $STAGING/EFA-Version-Upgrade-3.0.0.7
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.0.8
#----------------------------------------------------------------#
function update-3.0.0.8() {
  check_disk_space
  UPDATE="EFA-Update-3.0.0.7-3.0.0.8.tar.gz"
  download_update
  check_md5
    
  # Unpack update
  # Is staging area clean?
  [[ -n $STAGING ]] && rm -rf $STAGING/*
  tar xzvf $STAGING/$UPDATE
  [[ $? -ne 0 ]] && abort
  chmod 700 $STAGING/EFA-Version-Upgrade
  $STAGING/EFA-Version-Upgrade
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to download file
#----------------------------------------------------------------#
function download_update() {
  /usr/bin/wget -O $STAGING/$UPDATE $MIRROR/update/$UPDATE
  [[ $? -ne 0 ]] && abort
  /usr/bin/wget -O $STAGING/$UPDATE.md5 $MIRROR/update/$UPDATE.md5
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to check the MD5
#----------------------------------------------------------------#
function check_md5() {
  # Grab md5 from file
  checksum1=$(cat $STAGING/$UPDATE.md5 | awk '{print $1}')
  # Calculate md5
  checksum2=$(md5sum $STAGING/$UPDATE | awk '{print $1}')
  if [[ "$checksum1" != "$checksum2" ]]; then
    echo "Fatal:  $UPDATE md5 checksum does not match!  Aborting..."
    abort
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# initialize
#----------------------------------------------------------------#
function initialize() {
  # Start the TMPmail file
  echo "From: $MAILFROM" > $TMPMAIL
  echo "To: $MAILTO" >> $TMPMAIL
  echo "Reply-To: $MAILFROM" >> $TMPMAIL
  echo "Subject: $MAILSUBJECT" >> $TMPMAIL
  echo "" >> $TMPMAIL

  mkdir -p $STAGING
  cd $STAGING
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Finalize
#----------------------------------------------------------------#
function finalize() {
  cd /tmp
  rm -rf $STAGING

  # Finalize the mail and send it out
  echo "" >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL

  echo "All done"
  echo "If your system does not return to a command prompt"
  echo "you can now safely press ctrl-c to abort logsave"
  echo "Thank you for using E.F.A."
  exit 0
  exit 0
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Abort Routine
#----------------------------------------------------------------#
function abort() {
  rm -rf $STAGING

  echo "" >> $TMPMAIL
  echo "Update to Version $VERSION FAILED.  Updates cancelled." >> $TMPMAIL
  echo "Please visit http://www.efa-project.org for more information." >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL

  echo "Update to Version $VERSION FAILED.  Updates cancelled."
  echo "Please visit http://www.efa-project.org for more information."
  exit 1
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function get current version number
#----------------------------------------------------------------#
function get_cversion() {
  if [ -f /etc/EFA-Version ]
    then
      CVERSION="`head -1 /etc/EFA-Version`"
    else
      echo "ERROR: No valid version file found on this system."
      echo "ERROR: exiting now"
      exit 0
  fi

  # Check if we run an beta version
  if [[ $CVERSION =~ ^EFA\-[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}-beta$ ]]
    then
      echo "ERROR: You seem to be running an beta version, no upgrade possible."
      echo "ERROR: please look at http://www.efa-project.org for more information."
      echo "ERROR: exiting now"
      exit 0
  fi

  # Check if CVERSION is an valid Version file
  if ! [[ $CVERSION =~ ^EFA\-[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}$ ]]
    then
      echo "ERROR: The version file on your system does not seem to be valid."
      echo "ERROR: exiting now"
      exit 0
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Disk Space Check Routine
#----------------------------------------------------------------#
function check_disk_space() {
  # Abort update if disk space is low use is >= 95%
  THRESHOLD="95"
  DISKUSE=$(df -hP -t ext4 --local | awk '{print $5}' | grep [0-9] | tr -d "%")
  IFS1=$IFS
  IFS=" "
   for i in $DISKUSE; do
     if [[ $i -ge $THRESHOLD]]; then 
        
        echo "FATAL:  Update aborted.  Low disk space <=5% detected on one" >> $TMPMAIL 
        echo "or more local ext4 filesystems!" >> $TMPMAIL
        echo "Free up disk space before continuing."  >> $TMPMAIL
        echo "Please visit https://forums.efa-project.org for assistance." >> $TMPMAIL
        
        echo "FATAL:  Update aborted.  Low disk space <=5% detected on one"
        echo "or more local ext4 filesystems!"
        echo "Free up disk space before continuing."
        echo "Please visit https://forums.efa-project.org for assistance." 
              
        abort
     fi
  done
  IFS=$IFS1
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Check if we are root
#----------------------------------------------------------------#
function user_check() {
  if [ `whoami` == root ]
    then
      echo "[EFA] Good you are root"
  else
    echo "[EFA] Please become root to run this update"
    exit 0
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Where to start
#----------------------------------------------------------------#
user_check
get_update_path
