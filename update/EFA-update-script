#!/bin/bash
# +--------------------------------------------------------------------+
# EFA update script
# Version 20170906
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2017 https://efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

#----------------------------------------------------------------#
# Variables
#----------------------------------------------------------------#
logdir="/var/log/EFA"
gitdlurl="https://raw.githubusercontent.com/E-F-A/v3"
MIRROR="https://dl.efa-project.org"
mirrorpath="update"
ADMINEMAIL="`cat /etc/EFA-Config | grep ADMINEMAIL | sed 's/.*://'`"
MAILFROM="$ADMINEMAIL"
MAILTO="$ADMINEMAIL"
MAILSUBJECT="EFA Update Complete For: `hostname`"
SENDMAIL="/usr/lib/sendmail"
TMPMAIL="/tmp/tempmail"
STAGING="/tmp/EFA-Staging"
#----------------------------------------------------------------#


#----------------------------------------------------------------#
# test setup:
# EFA update scripts fetches .tar.gz file from dl.efa-project.org
# tar.gz file contains all files needed to update (previous from git and dl.efa-project.org)
# tar.gz file structure and naming:
# EFA-Update-<previous version>-<new version>.tar.gz:
#   EFA-Update-3.0.0.7-3.0.0.8.tar.gz
#      /EFA-Version-Upgrade           <- script that should be launched from this file.
#      /Files/                        <- Directory containing binary files
#      /Scripts/                      <- Directory containing update scripts (previous git scripts)
#
# Update methode:
# this script downloads the latest EFA-Update.XXXX-XXXX.tar.gz file
# this script runs MD5 checksum for the tar.gz. file
# this script unpacks the tar.gz file to /tmp/EFA-Staging
# this script runs the EFA-Version-Upgrade script
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# get-update path
#----------------------------------------------------------------#
function get_update_path() {
  get_cversion
  if [[ $CVERSION == "EFA-3.0.0.0" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.1" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.2" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.3" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.4" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.5" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.6" ]]
    then
      initialize
      update-3.0.0.7
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.7" ]]
    then
      initialize
      update-3.0.0.8
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.8" ]]
    then
      initialize
      update-3.0.0.9
      update-3.0.1.0
      update-3.0.1.1
      update-3.0.1.2
      update-3.0.1.3
      update-3.0.1.4
      update-3.0.1.5
      update-3.0.1.6
      update-3.0.1.7
      update-3.0.1.8
      update-3.0.1.9
      update-3.0.2.0
      update-3.0.2.1
      update-3.0.2.2
      update-3.0.2.3
      update-3.0.2.4
      finalize
  elif [[ $CVERSION == "EFA-3.0.0.9" ]]
      then
        initialize
        update-3.0.1.0
        update-3.0.1.1
        update-3.0.1.2
        update-3.0.1.3
        update-3.0.1.4
        update-3.0.1.5
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.0" ]]
      then
        initialize
        update-3.0.1.1
        update-3.0.1.2
        update-3.0.1.3
        update-3.0.1.4
        update-3.0.1.5
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.1" ]]
      then
        initialize
        update-3.0.1.2
        update-3.0.1.3
        update-3.0.1.4
        update-3.0.1.5
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.2" ]]
      then
        initialize
        update-3.0.1.3
        update-3.0.1.4
        update-3.0.1.5
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.3" ]]
      then
        initialize
        update-3.0.1.4
        update-3.0.1.5
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.4" ]]
      then
        initialize
        update-3.0.1.5
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.5" ]]
      then
        initialize
        update-3.0.1.6
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.6" ]]
      then
        initialize
        update-3.0.1.7
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.7" ]]
      then
        initialize
        update-3.0.1.8
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.8" ]]
      then
        initialize
        update-3.0.1.9
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.1.9" ]]
      then
        initialize
        update-3.0.2.0
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.2.0" ]]
      then
        initialize
        update-3.0.2.1
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.2.1" ]]
      then
        initialize
        update-3.0.2.2
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.2.2" ]]
      then
        initialize
        update-3.0.2.3
        update-3.0.2.4
        finalize
  elif [[ $CVERSION == "EFA-3.0.2.3" ]]
      then
        initialize
        update-3.0.2.4
        finalize
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.0.7 on the 'old way'
#----------------------------------------------------------------#
function update-3.0.0.7() {
  cd $STAGING
  wget -q $MIRROR/update/versions/EFA-Version-Upgrade-3.0.0.7
  [[ $? -ne 0 ]] && abort
  mv -f $STAGING/EFA-Version-Upgrade-3.0.0.7 /var/EFA/update/
  cd /var/EFA/update
  chmod 700 EFA-Version-Upgrade-3.0.0.7
  ./EFA-Version-Upgrade-3.0.0.7
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.0.8
#----------------------------------------------------------------#
function update-3.0.0.8() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.0.8"
  update-kernel

  UPDATE="EFA-Update-3.0.0.7-3.0.0.8.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.0.9
#----------------------------------------------------------------#
function update-3.0.0.9() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.0.9"
  update-kernel

  UPDATE="EFA-Update-3.0.0.8-3.0.0.9.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#


#----------------------------------------------------------------#
# Update to 3.0.1.0
#----------------------------------------------------------------#
function update-3.0.1.0() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.0"
  #update-kernel

  UPDATE="EFA-Update-3.0.0.9-3.0.1.0.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.1
#----------------------------------------------------------------#
function update-3.0.1.1() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.1"
  #update-kernel

  UPDATE="EFA-Update-3.0.1.0-3.0.1.1.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.2
#----------------------------------------------------------------#
function update-3.0.1.2() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.2"
  update-kernel

  UPDATE="EFA-Update-3.0.1.1-3.0.1.2.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.3
#----------------------------------------------------------------#
function update-3.0.1.3() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.3"
  update-kernel

  UPDATE="EFA-Update-3.0.1.2-3.0.1.3.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.4
#----------------------------------------------------------------#
function update-3.0.1.4() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.4"
  update-kernel

  UPDATE="EFA-Update-3.0.1.3-3.0.1.4.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.5
#----------------------------------------------------------------#
function update-3.0.1.5() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.5"
  update-kernel

  UPDATE="EFA-Update-3.0.1.4-3.0.1.5.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.6-beta
#----------------------------------------------------------------#
function update-3.0.1.6() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.6"
  update-kernel

  UPDATE="EFA-Update-3.0.1.5-3.0.1.6.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.7
#----------------------------------------------------------------#
function update-3.0.1.7() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.7"
  update-kernel

  UPDATE="EFA-Update-3.0.1.6-3.0.1.7.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.8
#----------------------------------------------------------------#
function update-3.0.1.8() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.8"
  update-kernel

  UPDATE="EFA-Update-3.0.1.7-3.0.1.8.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.1.9
#----------------------------------------------------------------#
function update-3.0.1.9() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.1.9"
  update-kernel

  UPDATE="EFA-Update-3.0.1.8-3.0.1.9.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.2.0
#----------------------------------------------------------------#
function update-3.0.2.0() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.2.0"
  update-kernel

  UPDATE="EFA-Update-3.0.1.9-3.0.2.0.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.2.1
#----------------------------------------------------------------#
function update-3.0.2.1() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.2.1"
  update-kernel

  UPDATE="EFA-Update-3.0.2.0-3.0.2.1.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.2.2
#----------------------------------------------------------------#
function update-3.0.2.2() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.2.2"
  update-kernel

  UPDATE="EFA-Update-3.0.2.1-3.0.2.2.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.2.3
#----------------------------------------------------------------#
function update-3.0.2.3() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.2.3"
  update-kernel

  UPDATE="EFA-Update-3.0.2.2-3.0.2.3.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update to 3.0.2.4
#----------------------------------------------------------------#
function update-3.0.2.4() {
 # Is staging area clean?
 [[ -n $STAGING ]] && rm -rf $STAGING/*

  check_disk_space

  # Check for kernel update prior to package download
  VERSION="3.0.2.4"
  update-kernel

  UPDATE="EFA-Update-3.0.2.3-3.0.2.4.tar.gz"
  download_update
  check_md5

  # Unpack update
  cd $STAGING
  tar xzvf $UPDATE
  [[ $? -ne 0 ]] && abort
  # Bypass noexec in /tmp
  rm -f /var/EFA/update/EFA-Version-Upgrade
  cp $STAGING/EFA-Version-Upgrade /var/EFA/update/EFA-Version-Upgrade
  chmod 700 /var/EFA/update/EFA-Version-Upgrade
  /var/EFA/update/EFA-Version-Upgrade
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to download file
#----------------------------------------------------------------#
function download_update() {
  /usr/bin/wget -O $STAGING/$UPDATE $MIRROR/update/$UPDATE
  [[ $? -ne 0 ]] && abort
  /usr/bin/wget -O $STAGING/$UPDATE.md5 $MIRROR/update/$UPDATE.md5
  [[ $? -ne 0 ]] && abort
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function to check the MD5
#----------------------------------------------------------------#
function check_md5() {
  # Grab md5 from file
  checksum1=$(cat $STAGING/$UPDATE.md5 | awk '{print $1}')
  # Calculate md5
  checksum2=$(md5sum $STAGING/$UPDATE | awk '{print $1}')
  if [[ "$checksum1" != "$checksum2" ]]; then
    echo "Fatal: $UPDATE md5 checksum does not match!Aborting..."
    abort
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# initialize
#----------------------------------------------------------------#
function initialize() {
  # Start the TMPmail file
  echo "From: $MAILFROM" > $TMPMAIL
  echo "To: $MAILTO" >> $TMPMAIL
  echo "Reply-To: $MAILFROM" >> $TMPMAIL
  echo "Subject: $MAILSUBJECT" >> $TMPMAIL
  echo "" >> $TMPMAIL

  mkdir -p $STAGING
  cd $STAGING
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Finalize
#----------------------------------------------------------------#
function finalize() {
  cd /tmp
  [[ -n $STAGING ]] && rm -rf $STAGING
  rm -f /var/EFA/update/EFA-Version-Upgrade*

  # Finalize the mail and send it out
  echo "" >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL

  echo "All done"
  echo "Please restart your system as soon as possible."
  echo "If your system does not return to a command prompt"
  echo "you can now safely press ctrl-c to abort logsave"
  echo "Thank you for using E.F.A."
  exit 0
  exit 0
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Abort Routine
#----------------------------------------------------------------#
function abort() {
  rm -rf $STAGING

  echo "" >> $TMPMAIL
  echo "Update to Version $VERSION FAILED. Updates cancelled." >> $TMPMAIL
  echo "Please visit http://www.efa-project.org for more information." >> $TMPMAIL
  cat $TMPMAIL | $SENDMAIL -t
  rm $TMPMAIL

  echo "Update to Version $VERSION FAILED. Updates cancelled."
  echo "Please visit http://www.efa-project.org for more information."
  exit 1
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Function get current version number
#----------------------------------------------------------------#
function get_cversion() {
  if [ -f /etc/EFA-Version ]
    then
      CVERSION="`head -1 /etc/EFA-Version`"
    else
      echo "ERROR: No valid version file found on this system."
      echo "ERROR: exiting now"
      exit 0
  fi

  # Check if we run an beta version
  if [[ $CVERSION =~ ^EFA\-[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}-beta$ ]]
    then
      echo "ERROR: You seem to be running an beta version, no upgrade possible."
      echo "ERROR: please look at http://www.efa-project.org for more information."
      echo "ERROR: exiting now"
      exit 0
  fi

  # Check if CVERSION is an valid Version file
  if ! [[ $CVERSION =~ ^EFA\-[0-9]{1}\.[0-9]{1}\.[0-9]{1}\.[0-9]{1}$ ]]
    then
      echo "ERROR: The version file on your system does not seem to be valid."
      echo "ERROR: exiting now"
      exit 0
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Disk Space Check Routine
#----------------------------------------------------------------#
function check_disk_space() {
  # Abort update if disk space is low use is >= 95%
  THRESHOLD="95"
  DISKUSE=$(df -hP -t ext4 --local | awk '{print $5}' | grep [0-9] | tr -d "%")
  for i in $DISKUSE; do
    if [[ $i -ge $THRESHOLD ]]; then

      echo "FATAL: Update aborted. Low disk space <=5% detected on one" >> $TMPMAIL
      echo "or more local ext4 filesystems!" >> $TMPMAIL
      echo "Free up disk space before continuing."  >> $TMPMAIL
      echo "Please visit https://forum.efa-project.org for assistance." >> $TMPMAIL

      echo "FATAL: Update aborted. Low disk space <=5% detected on one"
      echo "or more local ext4 filesystems!"
      echo "Free up disk space before continuing."
      echo "Please visit https://forums.efa-project.org for assistance."

      abort
    fi
  done

}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Update Kernel function
#----------------------------------------------------------------#
function update-kernel(){
  YUM_EXCLUDES=$(grep "^exclude=" /etc/yum.conf | awk -F'=' '{print $2}')
  sed -i "/^exclude=/ c\exclude=" /etc/yum.conf
  yum -y update kernel*
  if [[ $? -ne 0 ]]; then 
    sed -i "/^exclude=/ c\exclude=$YUM_EXCLUDES" /etc/yum.conf
    abort
  fi

  sed -i "/^exclude=/ c\exclude=$YUM_EXCLUDES" /etc/yum.conf

  # Kernel update check
  # If the kernel has updated in a previous update, and
  # the system has not rebooted, do not proceed until running
  # on latest kernel
  CURRENTKERNEL="`uname -r`"
  LATESTKERNEL="`grep -m 1 CentOS /boot/grub/menu.lst | sed 's/.*(//' | sed 's/)//'`"
  if [[ $CURRENTKERNEL != $LATESTKERNEL ]]; then

    # Zero out VMTOOLSVERSION to reapply open-vm-tools after reboot if installed
    sed -i "/^VMTOOLSVERSION:/ c\VMTOOLSVERSION:0" /etc/EFA-Config

    echo "Your system has an updated kernel, but you are not running"
    echo "on the latest kernel. Please restart your system and run"
    echo "EFA-Update after restart."

    echo "From: $MAILFROM" > $TMPMAIL
    echo "To: $MAILTO" >> $TMPMAIL
    echo "Reply-To: $MAILFROM" >> $TMPMAIL
    echo "Subject: Restart needed to update to $VERSION" >> $TMPMAIL
    echo "" >> $TMPMAIL
    echo "Update to $VERSION is pending." >> $TMPMAIL
    echo "Your system has an updated kernel, but you are not running" >> $TMPMAIL
    echo "on the latest kernel. Please restart your system and run" >> $TMPMAIL
    echo "EFA-Update after restart." >> $TMPMAIL
    cat $TMPMAIL | $SENDMAIL -t
    rm $TMPMAIL
    exit 1
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Check if we are root
#----------------------------------------------------------------#
function user_check() {
  if [ `whoami` == root ]
    then
      echo "[EFA] Good you are root"
  else
    echo "[EFA] Please become root to run this update"
    exit 0
  fi
}
#----------------------------------------------------------------#

#----------------------------------------------------------------#
# Where to start
#----------------------------------------------------------------#
user_check
get_update_path
